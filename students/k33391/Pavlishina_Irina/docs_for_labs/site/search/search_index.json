{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: \u043e\u0441\u043d\u043e\u0432\u044b web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","title":"Home"},{"location":"#_1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"#web-","text":"","title":"\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: \u043e\u0441\u043d\u043e\u0432\u044b web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"first/first/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP \u0421\u0435\u0440\u0432\u0435\u0440 \u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 import socket import threading PORT = 8080 \u0422\u0435\u043b\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def main(): global PORT sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('', PORT)) while True: data, addr = sock.recvfrom(1024) thread = threading.Thread(target=recieve, args=([data, addr, sock],)) thread.start() \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def recieve(data): print(data[0]) data[2].sendto(b\"Hello, client\", data[1]) ### \u041a\u043b\u0438\u0435\u043d\u0442 \u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 import socket PORT = 8080 \u0422\u0435\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 def main(): sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.sendto(b'Hello, server', ('localhost', PORT)) data, addr = sock.recvfrom(1024) print(data)","title":"Lab1:\u041f\u0435\u0440\u0432\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"first/first/#1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"first/first/#_1","text":"","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"first/first/#_2","text":"import socket import threading PORT = 8080","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"first/first/#_3","text":"def main(): global PORT sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('', PORT)) while True: data, addr = sock.recvfrom(1024) thread = threading.Thread(target=recieve, args=([data, addr, sock],)) thread.start()","title":"\u0422\u0435\u043b\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"first/first/#_4","text":"def recieve(data): print(data[0]) data[2].sendto(b\"Hello, client\", data[1]) ### \u041a\u043b\u0438\u0435\u043d\u0442","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f"},{"location":"first/first/#_5","text":"import socket PORT = 8080","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"first/first/#_6","text":"def main(): sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.sendto(b'Hello, server', ('localhost', PORT)) data, addr = sock.recvfrom(1024) print(data)","title":"\u0422\u0435\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"first/fith/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 4 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 import socket from email.parser import Parser from functools import lru_cache from urllib.parse import urlparse from urllib.parse import parse_qs MAX_LINE = 64*1024 \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 if __name__ == '__main__': host = 'localhost' port = 5321 name = \"name\" serv = MyHTTPServer(host=host, port=port, name=name) try: serv.serve_forever() except KeyboardInterrupt: pass \u0422\u0435\u043b\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 class MyHTTPServer: def __init__(self, host, port, name): self.host = host self.port = port self.name = name self.journal = {} def serve_forever(self): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: server_socket.bind((self.host, self.port)) server_socket.listen(10) while True: client_socket, (client_host, client_port) = server_socket.accept() try: self.serve_client(client_socket) except Exception as e: print('Client serving failed', e) print(client_socket) client_socket.close() finally: server_socket.close() def serve_client(self, client_socket): try: request = self.parse_request(client_socket) response = self.handle_request(request) self.send_response(client_socket, response) except ConnectionResetError: client_socket = None except Exception as e: self.send_error(client_socket, e) if client_socket: client_socket.close() def parse_request(self, client_socket): rfile = client_socket.makefile('rb') method, target, ver = self.parse_request_line(rfile) headers = self.parse_headers(rfile) host = headers.get('Host') if not host: raise Exception('Bad request') return Request(method, target, ver, headers, rfile) def parse_headers(self, rfile): headers = [] while True: line = rfile.readline(MAX_LINE + 1) if len(line) > MAX_LINE: raise Exception('Header line is too long') if line in (b'\\r\\n', b'\\n', b''): break headers.append(line) sheaders = b''.join(headers).decode('iso-8859-1') return Parser().parsestr(sheaders) def parse_request_line(self, rfile): raw = rfile.readline(MAX_LINE + 1) # \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0446\u0435\u043b\u0438\u043a\u043e\u043c if len(raw) > MAX_LINE: raise Exception('Request line is too long') req_line = str(raw, 'iso-8859-1') req_line = req_line.rstrip('\\r\\n') headers_words = req_line.split() # \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u0443 if len(headers_words) != 3: # \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0440\u043e\u0432\u043d\u043e 3 \u0447\u0430\u0441\u0442\u0438 raise Exception('Malformed request line') method, target, ver = headers_words if ver != 'HTTP/1.1': raise Exception('Unexpected HTTP version') return method, target, ver def handle_request(self, req): if req.path == '/journal/add' and req.method == 'POST': return self.handle_post_mark(req) if req.path == '/journal' and req.method == 'GET': return self.handle_get_subject(req) raise Exception('Not found') def handle_post_mark(self, req): subj = req.query['subject'][0] mark = req.query['mark'][0] if subj in self.journal.keys(): mark_id = len(self.journal[subj])+1 else: self.journal[subj] = [] mark_id = 1 self.journal[subj].append({'id': mark_id, 'grade': mark}) return Response(204, 'Created') def handle_get_subject(self, req): contentType = 'text/html; charset=utf-8' body = '<html><head>\u0416\u0443\u0440\u043d\u0430\u043b</head><body>' for subj in self.journal: body += f'<div>\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443: ({subj})</div>' body += '<ul>' for u in self.journal[subj]: body += f'<li>#{u[\"id\"]}: {u[\"grade\"]}</li>' body += '</ul>' body += '</body></html>' body = body.encode('utf-8') headers = [('Content-Type', contentType), ('Content-Length', len(body))] print(headers) return Response(200, 'OK', headers, body) def send_response(self, client_socket, resp): wfile = client_socket.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' wfile.write(status_line.encode('iso-8859-1')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' wfile.write(header_line.encode('iso-8859-1')) wfile.write(b'\\r\\n') if resp.body: wfile.write(resp.body) wfile.flush() wfile.close() def send_error(self, conn, err): try: status = err.status reason = err.reason body = (err.body or err.reason).encode('utf-8') except: status = 500 reason = b'Internal Server Error' body = b'Internal Server Error' resp = Response(status, reason, [('Content-Length', len(body))], body) self.send_response(conn, resp) \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b class HTTPError(Exception): def __init__(self, status, reason, body=None): super() self.status = status self.reason = reason self.body = body class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class Request: def __init__(self, method, target, version, headers, rfile): self.method = method self.target = target self.version = version self.headers = headers self.rfile = rfile @property def path(self): return self.url.path @property @lru_cache(maxsize=None) def query(self): return parse_qs(self.url.query) @property @lru_cache(maxsize=None) def url(self): return urlparse(self.target) def body(self): size = self.headers.get('Content-Length') if not size: return None return self.rfile.read(size) \u041a\u043b\u0438\u0435\u043d\u0442 \u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 import socket PORT = 5321 \u0422\u0435\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('127.0.0.1', PORT)) client_socket.send(b\"POST /journal/add?subject=Maths&mark=4 HTTP/1.1\\r\\nHost:www.example.com\\r\\nAccept:text/html\\r\\n\\r\\n\") #client_socket.send(b\"GET /journal/subject?subject=Maths HTTP/1.1\\r\\nHost:www.example.com\\r\\nAccept:text/html\\r\\n\\r\\n\") response = client_socket.recv(4096) client_socket.close() print(response.decode())","title":"Lab1:\u041f\u044f\u0442\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"first/fith/#4","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"first/fith/#_1","text":"","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"first/fith/#_2","text":"import socket from email.parser import Parser from functools import lru_cache from urllib.parse import urlparse from urllib.parse import parse_qs MAX_LINE = 64*1024","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"first/fith/#_3","text":"if __name__ == '__main__': host = 'localhost' port = 5321 name = \"name\" serv = MyHTTPServer(host=host, port=port, name=name) try: serv.serve_forever() except KeyboardInterrupt: pass","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"first/fith/#_4","text":"class MyHTTPServer: def __init__(self, host, port, name): self.host = host self.port = port self.name = name self.journal = {} def serve_forever(self): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: server_socket.bind((self.host, self.port)) server_socket.listen(10) while True: client_socket, (client_host, client_port) = server_socket.accept() try: self.serve_client(client_socket) except Exception as e: print('Client serving failed', e) print(client_socket) client_socket.close() finally: server_socket.close() def serve_client(self, client_socket): try: request = self.parse_request(client_socket) response = self.handle_request(request) self.send_response(client_socket, response) except ConnectionResetError: client_socket = None except Exception as e: self.send_error(client_socket, e) if client_socket: client_socket.close() def parse_request(self, client_socket): rfile = client_socket.makefile('rb') method, target, ver = self.parse_request_line(rfile) headers = self.parse_headers(rfile) host = headers.get('Host') if not host: raise Exception('Bad request') return Request(method, target, ver, headers, rfile) def parse_headers(self, rfile): headers = [] while True: line = rfile.readline(MAX_LINE + 1) if len(line) > MAX_LINE: raise Exception('Header line is too long') if line in (b'\\r\\n', b'\\n', b''): break headers.append(line) sheaders = b''.join(headers).decode('iso-8859-1') return Parser().parsestr(sheaders) def parse_request_line(self, rfile): raw = rfile.readline(MAX_LINE + 1) # \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0446\u0435\u043b\u0438\u043a\u043e\u043c if len(raw) > MAX_LINE: raise Exception('Request line is too long') req_line = str(raw, 'iso-8859-1') req_line = req_line.rstrip('\\r\\n') headers_words = req_line.split() # \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u0443 if len(headers_words) != 3: # \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0440\u043e\u0432\u043d\u043e 3 \u0447\u0430\u0441\u0442\u0438 raise Exception('Malformed request line') method, target, ver = headers_words if ver != 'HTTP/1.1': raise Exception('Unexpected HTTP version') return method, target, ver def handle_request(self, req): if req.path == '/journal/add' and req.method == 'POST': return self.handle_post_mark(req) if req.path == '/journal' and req.method == 'GET': return self.handle_get_subject(req) raise Exception('Not found') def handle_post_mark(self, req): subj = req.query['subject'][0] mark = req.query['mark'][0] if subj in self.journal.keys(): mark_id = len(self.journal[subj])+1 else: self.journal[subj] = [] mark_id = 1 self.journal[subj].append({'id': mark_id, 'grade': mark}) return Response(204, 'Created') def handle_get_subject(self, req): contentType = 'text/html; charset=utf-8' body = '<html><head>\u0416\u0443\u0440\u043d\u0430\u043b</head><body>' for subj in self.journal: body += f'<div>\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443: ({subj})</div>' body += '<ul>' for u in self.journal[subj]: body += f'<li>#{u[\"id\"]}: {u[\"grade\"]}</li>' body += '</ul>' body += '</body></html>' body = body.encode('utf-8') headers = [('Content-Type', contentType), ('Content-Length', len(body))] print(headers) return Response(200, 'OK', headers, body) def send_response(self, client_socket, resp): wfile = client_socket.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' wfile.write(status_line.encode('iso-8859-1')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' wfile.write(header_line.encode('iso-8859-1')) wfile.write(b'\\r\\n') if resp.body: wfile.write(resp.body) wfile.flush() wfile.close() def send_error(self, conn, err): try: status = err.status reason = err.reason body = (err.body or err.reason).encode('utf-8') except: status = 500 reason = b'Internal Server Error' body = b'Internal Server Error' resp = Response(status, reason, [('Content-Length', len(body))], body) self.send_response(conn, resp)","title":"\u0422\u0435\u043b\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"first/fith/#_5","text":"class HTTPError(Exception): def __init__(self, status, reason, body=None): super() self.status = status self.reason = reason self.body = body class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class Request: def __init__(self, method, target, version, headers, rfile): self.method = method self.target = target self.version = version self.headers = headers self.rfile = rfile @property def path(self): return self.url.path @property @lru_cache(maxsize=None) def query(self): return parse_qs(self.url.query) @property @lru_cache(maxsize=None) def url(self): return urlparse(self.target) def body(self): size = self.headers.get('Content-Length') if not size: return None return self.rfile.read(size)","title":"\u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b"},{"location":"first/fith/#_6","text":"","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"first/fith/#_7","text":"import socket PORT = 5321","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"first/fith/#_8","text":"def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('127.0.0.1', PORT)) client_socket.send(b\"POST /journal/add?subject=Maths&mark=4 HTTP/1.1\\r\\nHost:www.example.com\\r\\nAccept:text/html\\r\\n\\r\\n\") #client_socket.send(b\"GET /journal/subject?subject=Maths HTTP/1.1\\r\\nHost:www.example.com\\r\\nAccept:text/html\\r\\n\\r\\n\") response = client_socket.recv(4096) client_socket.close() print(response.decode())","title":"\u0422\u0435\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"first/forth/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u2013 100% \u0431\u0430\u043b\u043b\u043e\u0432, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP \u2013 80%. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, thearding \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0421\u0435\u0440\u0432\u0435\u0440 \u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 import socket import threading PORT = 8080 clients = {} \u0422\u0435\u043b\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def main(): global PORT global clients server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', PORT)) server_socket.listen(5) while True: client_socket, (client_host, client_port) = server_socket.accept() client_socket.send(b'Enter your nickname: ') nick = client_socket.recv(1024).decode('utf-8') clients[client_socket] = nick thread = threading.Thread(target=chat, args=(client_socket,)) thread.start() \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 def chat(client_socket): global clients while True: mail = client_socket.recv(1024).decode('utf-8') for sock in clients.keys(): sock.send(f'{clients[client_socket]} send: {mail}'.encode('utf-8')) \u041a\u043b\u0438\u0435\u043d\u0442 \u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 import socket import threading PORT = 8080 \u0422\u0435\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 def main(): global PORT client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', PORT)) message = client_socket.recv(4096) print(message.decode()) nick = input() client_socket.send(nick.encode('utf-8')) listen = threading.Thread(target=listen_chat, args=(client_socket,)) listen.start() write = threading.Thread(target=write_chat, args=(client_socket,)) write.start() \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 def write_chat(client_socket): while True: message = input() client_socket.send(message.encode('utf-8')) \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def listen_chat(client_socket): while True: message = client_socket.recv(1024).decode('utf-8') print(message)","title":"Lab1:\u0427\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"first/forth/#4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u2013 100% \u0431\u0430\u043b\u043b\u043e\u0432, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP \u2013 80%. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, thearding \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"first/forth/#_1","text":"","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"first/forth/#_2","text":"import socket import threading PORT = 8080 clients = {}","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"first/forth/#_3","text":"def main(): global PORT global clients server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', PORT)) server_socket.listen(5) while True: client_socket, (client_host, client_port) = server_socket.accept() client_socket.send(b'Enter your nickname: ') nick = client_socket.recv(1024).decode('utf-8') clients[client_socket] = nick thread = threading.Thread(target=chat, args=(client_socket,)) thread.start()","title":"\u0422\u0435\u043b\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"first/forth/#_4","text":"def chat(client_socket): global clients while True: mail = client_socket.recv(1024).decode('utf-8') for sock in clients.keys(): sock.send(f'{clients[client_socket]} send: {mail}'.encode('utf-8'))","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432"},{"location":"first/forth/#_5","text":"","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"first/forth/#_6","text":"import socket import threading PORT = 8080","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"first/forth/#_7","text":"def main(): global PORT client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', PORT)) message = client_socket.recv(4096) print(message.decode()) nick = input() client_socket.send(nick.encode('utf-8')) listen = threading.Thread(target=listen_chat, args=(client_socket,)) listen.start() write = threading.Thread(target=write_chat, args=(client_socket,)) write.start()","title":"\u0422\u0435\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"first/forth/#_8","text":"def write_chat(client_socket): while True: message = input() client_socket.send(message.encode('utf-8'))","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u0443"},{"location":"first/forth/#_9","text":"def listen_chat(client_socket): while True: message = client_socket.recv(1024).decode('utf-8') print(message)","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"first/second/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b: - a. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 - b. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. - c. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. - d. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u0421\u0435\u0440\u0432\u0435\u0440 \u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 import socket import threading PORT = 8080 \u0422\u0435\u043b\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def main(): PORT = 8080 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', PORT)) server_socket.listen(10) while True: try: client_socket, client_address = server_socket.accept() thread = threading.Thread(target=chat, args=([client_socket, client_address], )) thread.start() except KeyboardInterrupt: server_socket.close() break \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def parce_string(string): return string.split() def chat(client): while True: client_socket = client[0] client_address = client[1] data = client_socket.recv(65536).decode('utf-8') a, b, c = parce_string(data) x1, x2 = quadratic_equation(int(a), int(b), int(c)) ans = f\"X1= {x1}, X2= {x2}\" client_socket.sendto(ans.encode(), client_address) \u0420\u0430\u0441\u0447\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430 def quadratic_equation(a, b, c): x1 = (-b+(b**2 - 4*a*c)**(1/2))/(2*a) x2 = (-b-(b**2 - 4*a*c)**(1/2))/(2*a) return x1, x2 \u041a\u043b\u0438\u0435\u043d\u0442 \u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 import socket import threading import time PORT = 8080 \u0422\u0435\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', PORT)) listen = threading.Thread(target=listen_chat, args=(client_socket,)) listen.start() write = threading.Thread(target=write_chat, args=(client_socket,)) write.start() \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 def write_chat(client_socket): while True: client_socket.sendall(f'{random.randint(-100, 100)} {random.randint(-100, 100)} {random.randint(-100, 100)}' .encode('utf-8')) time.sleep(1) \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def listen_chat(client_socket): while True: ans = client_socket.recv(1024).decode('utf-8') print(ans)","title":"Lab1:\u0412\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"first/second/#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b: - a. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 - b. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. - c. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. - d. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"first/second/#_1","text":"","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"first/second/#_2","text":"import socket import threading PORT = 8080","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"first/second/#_3","text":"def main(): PORT = 8080 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', PORT)) server_socket.listen(10) while True: try: client_socket, client_address = server_socket.accept() thread = threading.Thread(target=chat, args=([client_socket, client_address], )) thread.start() except KeyboardInterrupt: server_socket.close() break","title":"\u0422\u0435\u043b\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"first/second/#_4","text":"def parce_string(string): return string.split() def chat(client): while True: client_socket = client[0] client_address = client[1] data = client_socket.recv(65536).decode('utf-8') a, b, c = parce_string(data) x1, x2 = quadratic_equation(int(a), int(b), int(c)) ans = f\"X1= {x1}, X2= {x2}\" client_socket.sendto(ans.encode(), client_address)","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f"},{"location":"first/second/#_5","text":"def quadratic_equation(a, b, c): x1 = (-b+(b**2 - 4*a*c)**(1/2))/(2*a) x2 = (-b-(b**2 - 4*a*c)**(1/2))/(2*a) return x1, x2","title":"\u0420\u0430\u0441\u0447\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430"},{"location":"first/second/#_6","text":"","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"first/second/#_7","text":"import socket import threading import time PORT = 8080","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"first/second/#_8","text":"def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', PORT)) listen = threading.Thread(target=listen_chat, args=(client_socket,)) listen.start() write = threading.Thread(target=write_chat, args=(client_socket,)) write.start()","title":"\u0422\u0435\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"first/second/#_9","text":"def write_chat(client_socket): while True: client_socket.sendall(f'{random.randint(-100, 100)} {random.randint(-100, 100)} {random.randint(-100, 100)}' .encode('utf-8')) time.sleep(1)","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u0443"},{"location":"first/second/#_10","text":"def listen_chat(client_socket): while True: ans = client_socket.recv(1024).decode('utf-8') print(ans)","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"first/third/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438: - http://zetcode.com/python/socket/ \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0421\u0435\u0440\u0432\u0435\u0440 \u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 import socket import threading PORT = 8080 \u0422\u0435\u043b\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def main(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', PORT)) server_socket.listen(5) while True: try: client_socket, client_address = server_socket.accept() thread = threading.Thread(target=chat, args=(client_socket, )) thread.start() except KeyboardInterrupt: server_socket.close() break \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def chat(client_socket): while True: client_socket.recv(1000) response_type = 'HTTP/1.0 200 OK\\n' headers = 'Content-Type: text/html\\n\\n' with open('index.html', 'r') as f: body = f.read() response = response_type + headers + body client_socket.send(response.encode('utf-8')) \u041a\u043b\u0438\u0435\u043d\u0442 \u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 import socket import threading PORT = 8080 \u0422\u0435\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', PORT)) listen = threading.Thread(target=listen_chat, args=(client_socket,)) listen.start() write = threading.Thread(target=write_chat, args=(client_socket,)) write.start() \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 def write_chat(client_socket): while True: client_socket.send(b\"GET / HTTP/1.0\\r\\nHost:localhost\\r\\n\\r\\n\") \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def listen_chat(client_socket): while True: response = client_socket.recv(1024).decode('utf-8') print(response)","title":"Lab1:\u0422\u0440\u0435\u0442\u044c\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"first/third/#3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438: - http://zetcode.com/python/socket/ \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"first/third/#_1","text":"","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"first/third/#_2","text":"import socket import threading PORT = 8080","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"first/third/#_3","text":"def main(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', PORT)) server_socket.listen(5) while True: try: client_socket, client_address = server_socket.accept() thread = threading.Thread(target=chat, args=(client_socket, )) thread.start() except KeyboardInterrupt: server_socket.close() break","title":"\u0422\u0435\u043b\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"first/third/#_4","text":"def chat(client_socket): while True: client_socket.recv(1000) response_type = 'HTTP/1.0 200 OK\\n' headers = 'Content-Type: text/html\\n\\n' with open('index.html', 'r') as f: body = f.read() response = response_type + headers + body client_socket.send(response.encode('utf-8'))","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f"},{"location":"first/third/#_5","text":"","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"first/third/#_6","text":"import socket import threading PORT = 8080","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"first/third/#_7","text":"def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', PORT)) listen = threading.Thread(target=listen_chat, args=(client_socket,)) listen.start() write = threading.Thread(target=write_chat, args=(client_socket,)) write.start()","title":"\u0422\u0435\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"first/third/#_8","text":"def write_chat(client_socket): while True: client_socket.send(b\"GET / HTTP/1.0\\r\\nHost:localhost\\r\\n\\r\\n\")","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u0443"},{"location":"first/third/#_9","text":"def listen_chat(client_socket): while True: response = client_socket.recv(1024).decode('utf-8') print(response)","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"second/first/","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f/\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0412 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c\u044b\u0435 \u0432 settings.py, \u0432\u043d\u0435\u0441\u0435\u043d\u044b \u0434\u0432\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f: INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ## 'flights.apps.FlightsConfig' ] \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0431\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u0418: AUTH_USER_MODEL = 'flights.Passenger' \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043c\u043e\u0434\u0435\u043b\u0438 \u044e\u0437\u0435\u0440\u0430. \u0422\u0430\u043a \u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u0440\u0435\u043d\u044c \u0434\u043b\u044f \u044e\u0440\u043b-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f urlpatterns = [ path('admin/', admin.site.urls), path('main/', include('flights.urls')) ]","title":"Lab2:\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"second/first/#_1","text":"\u0412 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c\u044b\u0435 \u0432 settings.py, \u0432\u043d\u0435\u0441\u0435\u043d\u044b \u0434\u0432\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f: INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ## 'flights.apps.FlightsConfig' ] \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0431\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u0418: AUTH_USER_MODEL = 'flights.Passenger' \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043c\u043e\u0434\u0435\u043b\u0438 \u044e\u0437\u0435\u0440\u0430. \u0422\u0430\u043a \u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u0440\u0435\u043d\u044c \u0434\u043b\u044f \u044e\u0440\u043b-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f urlpatterns = [ path('admin/', admin.site.urls), path('main/', include('flights.urls')) ]","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f/\u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"second/fith/","text":"\u0422\u0435\u043c\u043f\u043b\u044d\u0439\u0442\u044b \u041e\u0431\u0435\u0440\u0442\u043a\u0430 <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"/> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/> <title>Lab 2</title> </head> <body> <nav class=\"navbar navbar-expand-lg navbar-light bg-light\"> <div class=\"collapse navbar-collapse\" id=\"navbarText\"> <a class=\"nav-link active\" aria-current=\"page\" href=\"{% url 'flights_list' %}\">All flight</a> {% if user.is_authenticated %} <a class=\"nav-link active\" aria-current=\"page\" href=\"{% url 'reservations_for_user' %}\"> Your reservations </a> {% endif %} <br><br> {% if user.is_authenticated %} You have logged as {{ user.username }}. Click here to <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Logout</a></br> {% else %} <a href=\"{% url 'user_login' %}\" class=\"mr-2\"> <button class=\"btn btn-outline-primary btn-sm\" type=\"submit\">Login</button> </a> <a href=\"{% url 'register' %}\"> <button class=\"btn btn-outline-primary btn-sm\" type=\"submit\">Register</button> </a> {% endif %} </div> </nav> <div class=\"container py-3\"> {% block content %} {% endblock %} </div> </body> </html> \u041b\u043e\u0433\u0438\u043d {% extends 'base.html' %} {% block content %} <h2 class=\"mb-3\">Sign in</h2> <form method=\"post\" class=\"mb-3\"> {% csrf_token %} {{ user_form.as_p }} <button type=\"submit\" class=\"btn btn-primary\">Sign in</button> </form> {% endblock %} \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f {% extends 'base.html' %} {% block content %} <h2 class=\"mb-4\">Registration</h2> <form method=\"post\" class=\"mb-3\"> {% csrf_token %} {{ user_form.as_p }} <button type=\"submit\" class=\"btn btn-primary\">Register</button> </form> <p>Already have a profile? <a href=\"{% url 'user_login' %}\" class=\"text-primary\">Login</a></p> {% endblock %} \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0435\u0442\u043e\u0432 {% extends 'base.html' %} {% block content %} <h1 class=\"text-center\">Schedule{% if city %} {{city}} {% endif %} {% if airline %} {{airline}} {% endif %}</h1> <form method=\"GET\" class='mb-5'> <div class='mb-3'> <label for=\"citySearchSelect\" class=\"form-label\">City: </label> <select id=\"citySearchSelect\" name=\"city\" class=\"form-select form-select-lg \"> <option value=\"\">Choose the city</option> {% for available_city in available_cities %} <option value=\"{{available_city.name}}\" {% if city == available_city.name %} selected {% endif %} > {{available_city.name}} </option> {% endfor %} </select> </div> <div class='mb-3'> <label for=\"airlineSearchSelect\" class=\"form-label\">airline: </label> <select id=\"airlineSearchSelect\" name=\"airline\" class=\"form-select form-select-lg \"> <option value=\"\">Choose the airline</option> {% for available_airline in available_airlines %} <option value=\"{{available_airline.name}}\" {% if airline == available_airline.name %} selected {% endif %} > {{available_airline.name}} </option> {% endfor %} </select> </div> <button type=\"submit\" class=\"btn btn-primary\">Find</button> </form> <table class=\"table table-striped table-hover mb-5\"> <thead> <tr> <th scope=\"col\">Type:</th> <th scope=\"col\">Time From:</th> <th scope=\"col\">Time To:</th> <th scope=\"col\">Flight Num:</th> <th scope=\"col\">Direction From:</th> <th scope=\"col\">Direction To:</th> <th scope=\"col\">Airline:</th> <th scope=\"col\">Plane model:</th> <th scope=\"col\">Extra:</th> </tr> </thead> <tbody> {% for flight in flights %} <tr> <td>{{flight.type}}</td> <td>{{flight.departure_time}}</td> <td>{{flight.arrival_time}}</td> <td>{{flight.flight_number}}</td> <td>{{flight.arrival_city.name}}</td> <td>{{flight.departure_city.name}}</td> <td>{{flight.air_line.name}}</td> <td>{{flight.plane.name}}</td> <td><a href=\"{% url 'flight_detail' flight.id %}\">Details</a></td> </tr> {% endfor %} </tbody> </table> {% endblock %} \u0414\u0435\u0442\u0430\u043b\u0438 \u043f\u043e\u043b\u0435\u0442\u0430 {% extends 'base.html' %} {% block content %} <h1>FLight {{flight.name}}</h1> <h2 class=\"mb-3\">Information about flight</h2> <div>Flight number: {{ flight.flight_number }}</div> <div>Airline: {{ flight.air_line }}</div> <div>Departure: {{ flight.departure_city }} {{ flight.departure }}</div> <div>Arrival: {{ flight.arrival_city }} {{ flight.arrival }}</div> <div>Type: {{ flight.type }}</div> <div>Gate: {{ flight.gate }}</div> <h2>Passengers</h2> <div class=\"row mb-5\"> <div class=\"col-md-5\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th scope=\"col\">Username</th> <th scope=\"col\">Seat</th> </tr> </thead> <tbody> {% for ticket in tickets %} <tr> <td class=\"align-middle\">{{ticket.passenger.last_name}} {{ticket.passenger.first_name}} </td> <td class=\"align-middle\">{{ticket.seat}}</td> </tr> {% endfor %} </tbody> </table> </div> </div> <h4 class=\"my-3\">Comments</h4> <ul class=\"list-group\"> {% for comment in comments %} <li class=\"list-group-item\"> <strong>{{ comment.author.username }}</strong> <br> Rating: {{ comment.rating }} <br> {{ comment.text }} </li> {% endfor %} </ul> <h2>Seats</h2> <table class=\"table table-striped table-hover mb-5\"> {% for seat in seats %} <td class=\"text-center\"> {% if seat.is_taken %} <s style=\"color:grey;\">{{seat.name}}</s> {% else %} {{seat.name}} {% endif %} </td> {% endfor %} </table> <h2>Reserve a seat</h2> {% if user.is_authenticated %} <div class=\"row\"> <div class=\"col-md-3\"> <form method=\"post\"> {% csrf_token %} <div class=\"mb-3\"> <label for=\"ticketSeatInput\" class=\"form-label\">Seat: </label> <input name='seat' class=\"form-control\" id=\"ticketSeatInput\"> </div> <button type=\"submit\" class=\"btn btn-primary\">Submit</button> </form> </div> </div> {% if has_ticket%} <td><a href=\"{% url 'reservations_for_user'%}\">You already have a ticket on these flight</a></td> {% endif %} <h5 class=\"my-3\">Add comment</h5> <form method=\"post\" class=\"mb-5\"> {% csrf_token %} {{ comment_form.as_p }} <button type=\"submit\" class=\"btn btn-primary\">Add</button> </form> {% else %} <td><a href=\"{% url 'register' %}\">Register</a> previously</td> {% endif %} {% endblock %} \u0421\u043f\u0438\u0441\u043e\u043a \u0431\u0440\u043e\u043d\u0435\u0439 {% extends 'base.html' %} {% block content %} <h2 class=\"mb-4\">Your reservations</h2> <table class=\"table table-bordered\"> <thead class=\"thead-light\"> <tr> <th scope=\"col\">Seat</th> <th scope=\"col\">Ticket</th> <th scope=\"col\">Flight</th> <th scope=\"col\">FlightLink</th> </tr> </thead> <tbody> {% for reservation in reservations %} <tr> <td>{{ reservation.seat}}</td> <td>{{ reservation.ticket_number}}</td> <td> <div>Flight number: {{ reservation.flight.flight_number }}</div> <div>Airline: {{ reservation.flight.air_line }}</div> <div>Departure: {{ reservation.flight.departure_city }} {{ reservation.flight.departure }}</div> <div>Arrival: {{ reservation.flight.arrival_city }} {{ reservation.flight.arrival }}</div> <div>Gate: {{ reservation.flight.gate }}</div> </td> <td><a href=\"{% url 'flight_detail' reservation.flight.id %}\" class=\"btn btn-primary\">More</a></td> <td><a href=\"{% url 'reservation_update' reservation.id %}\" class=\"btn btn-primary\">Change</a></td> </tr> {% endfor %} </tbody> </table> {% endblock %} \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 {% extends 'base.html' %} {% block content %} <a href=\"{% url 'flight_detail' reservation.flight.id %}\" class=\"btn btn-secondary mb-4\">Back to flight</a> <h2>Change seat</h2> <h5 class=\"my-3\">Information about reservation</h5> <div>Old seat: {{ reservation.seat }}</div> <div>Ticket: {{ reservation.ticket_number }}</div> <form method=\"POST\" class=\"mt-3\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\" class=\"btn btn-primary\">Save changes</button> <a href=\"{% url 'reservation_delete' reservation.id %}\" class=\"btn btn-primary\"> or Delete</a> </form> {% endblock %} \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 {% extends 'base.html' %} {% block content %} <a href=\"{% url 'flight_detail' reservation.flight.id %}\" class=\"btn btn-secondary mb-4\">Back to flight</a> <h2>Delete reservation</h2> <h5 class=\"my-3\">Information about reservation</h5> <div>Seat: {{ reservation.seat }}</div> <div>Ticket: {{ reservation.ticket_number }}</div> <form method=\"POST\" class=\"mt-3\"> {% csrf_token %} <p>Are you sure you want to delete reservation?</p> <button type=\"submit\" class=\"btn btn-danger\">Delete</button> </form> {% endblock %}","title":"Lab2:\u0422\u0435\u043c\u043f\u043b\u044d\u0439\u0442\u044b"},{"location":"second/fith/#_1","text":"","title":"\u0422\u0435\u043c\u043f\u043b\u044d\u0439\u0442\u044b"},{"location":"second/fith/#_2","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"/> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/> <title>Lab 2</title> </head> <body> <nav class=\"navbar navbar-expand-lg navbar-light bg-light\"> <div class=\"collapse navbar-collapse\" id=\"navbarText\"> <a class=\"nav-link active\" aria-current=\"page\" href=\"{% url 'flights_list' %}\">All flight</a> {% if user.is_authenticated %} <a class=\"nav-link active\" aria-current=\"page\" href=\"{% url 'reservations_for_user' %}\"> Your reservations </a> {% endif %} <br><br> {% if user.is_authenticated %} You have logged as {{ user.username }}. Click here to <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Logout</a></br> {% else %} <a href=\"{% url 'user_login' %}\" class=\"mr-2\"> <button class=\"btn btn-outline-primary btn-sm\" type=\"submit\">Login</button> </a> <a href=\"{% url 'register' %}\"> <button class=\"btn btn-outline-primary btn-sm\" type=\"submit\">Register</button> </a> {% endif %} </div> </nav> <div class=\"container py-3\"> {% block content %} {% endblock %} </div> </body> </html>","title":"\u041e\u0431\u0435\u0440\u0442\u043a\u0430"},{"location":"second/fith/#_3","text":"{% extends 'base.html' %} {% block content %} <h2 class=\"mb-3\">Sign in</h2> <form method=\"post\" class=\"mb-3\"> {% csrf_token %} {{ user_form.as_p }} <button type=\"submit\" class=\"btn btn-primary\">Sign in</button> </form> {% endblock %}","title":"\u041b\u043e\u0433\u0438\u043d"},{"location":"second/fith/#_4","text":"{% extends 'base.html' %} {% block content %} <h2 class=\"mb-4\">Registration</h2> <form method=\"post\" class=\"mb-3\"> {% csrf_token %} {{ user_form.as_p }} <button type=\"submit\" class=\"btn btn-primary\">Register</button> </form> <p>Already have a profile? <a href=\"{% url 'user_login' %}\" class=\"text-primary\">Login</a></p> {% endblock %}","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f"},{"location":"second/fith/#_5","text":"{% extends 'base.html' %} {% block content %} <h1 class=\"text-center\">Schedule{% if city %} {{city}} {% endif %} {% if airline %} {{airline}} {% endif %}</h1> <form method=\"GET\" class='mb-5'> <div class='mb-3'> <label for=\"citySearchSelect\" class=\"form-label\">City: </label> <select id=\"citySearchSelect\" name=\"city\" class=\"form-select form-select-lg \"> <option value=\"\">Choose the city</option> {% for available_city in available_cities %} <option value=\"{{available_city.name}}\" {% if city == available_city.name %} selected {% endif %} > {{available_city.name}} </option> {% endfor %} </select> </div> <div class='mb-3'> <label for=\"airlineSearchSelect\" class=\"form-label\">airline: </label> <select id=\"airlineSearchSelect\" name=\"airline\" class=\"form-select form-select-lg \"> <option value=\"\">Choose the airline</option> {% for available_airline in available_airlines %} <option value=\"{{available_airline.name}}\" {% if airline == available_airline.name %} selected {% endif %} > {{available_airline.name}} </option> {% endfor %} </select> </div> <button type=\"submit\" class=\"btn btn-primary\">Find</button> </form> <table class=\"table table-striped table-hover mb-5\"> <thead> <tr> <th scope=\"col\">Type:</th> <th scope=\"col\">Time From:</th> <th scope=\"col\">Time To:</th> <th scope=\"col\">Flight Num:</th> <th scope=\"col\">Direction From:</th> <th scope=\"col\">Direction To:</th> <th scope=\"col\">Airline:</th> <th scope=\"col\">Plane model:</th> <th scope=\"col\">Extra:</th> </tr> </thead> <tbody> {% for flight in flights %} <tr> <td>{{flight.type}}</td> <td>{{flight.departure_time}}</td> <td>{{flight.arrival_time}}</td> <td>{{flight.flight_number}}</td> <td>{{flight.arrival_city.name}}</td> <td>{{flight.departure_city.name}}</td> <td>{{flight.air_line.name}}</td> <td>{{flight.plane.name}}</td> <td><a href=\"{% url 'flight_detail' flight.id %}\">Details</a></td> </tr> {% endfor %} </tbody> </table> {% endblock %}","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0435\u0442\u043e\u0432"},{"location":"second/fith/#_6","text":"{% extends 'base.html' %} {% block content %} <h1>FLight {{flight.name}}</h1> <h2 class=\"mb-3\">Information about flight</h2> <div>Flight number: {{ flight.flight_number }}</div> <div>Airline: {{ flight.air_line }}</div> <div>Departure: {{ flight.departure_city }} {{ flight.departure }}</div> <div>Arrival: {{ flight.arrival_city }} {{ flight.arrival }}</div> <div>Type: {{ flight.type }}</div> <div>Gate: {{ flight.gate }}</div> <h2>Passengers</h2> <div class=\"row mb-5\"> <div class=\"col-md-5\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th scope=\"col\">Username</th> <th scope=\"col\">Seat</th> </tr> </thead> <tbody> {% for ticket in tickets %} <tr> <td class=\"align-middle\">{{ticket.passenger.last_name}} {{ticket.passenger.first_name}} </td> <td class=\"align-middle\">{{ticket.seat}}</td> </tr> {% endfor %} </tbody> </table> </div> </div> <h4 class=\"my-3\">Comments</h4> <ul class=\"list-group\"> {% for comment in comments %} <li class=\"list-group-item\"> <strong>{{ comment.author.username }}</strong> <br> Rating: {{ comment.rating }} <br> {{ comment.text }} </li> {% endfor %} </ul> <h2>Seats</h2> <table class=\"table table-striped table-hover mb-5\"> {% for seat in seats %} <td class=\"text-center\"> {% if seat.is_taken %} <s style=\"color:grey;\">{{seat.name}}</s> {% else %} {{seat.name}} {% endif %} </td> {% endfor %} </table> <h2>Reserve a seat</h2> {% if user.is_authenticated %} <div class=\"row\"> <div class=\"col-md-3\"> <form method=\"post\"> {% csrf_token %} <div class=\"mb-3\"> <label for=\"ticketSeatInput\" class=\"form-label\">Seat: </label> <input name='seat' class=\"form-control\" id=\"ticketSeatInput\"> </div> <button type=\"submit\" class=\"btn btn-primary\">Submit</button> </form> </div> </div> {% if has_ticket%} <td><a href=\"{% url 'reservations_for_user'%}\">You already have a ticket on these flight</a></td> {% endif %} <h5 class=\"my-3\">Add comment</h5> <form method=\"post\" class=\"mb-5\"> {% csrf_token %} {{ comment_form.as_p }} <button type=\"submit\" class=\"btn btn-primary\">Add</button> </form> {% else %} <td><a href=\"{% url 'register' %}\">Register</a> previously</td> {% endif %} {% endblock %}","title":"\u0414\u0435\u0442\u0430\u043b\u0438 \u043f\u043e\u043b\u0435\u0442\u0430"},{"location":"second/fith/#_7","text":"{% extends 'base.html' %} {% block content %} <h2 class=\"mb-4\">Your reservations</h2> <table class=\"table table-bordered\"> <thead class=\"thead-light\"> <tr> <th scope=\"col\">Seat</th> <th scope=\"col\">Ticket</th> <th scope=\"col\">Flight</th> <th scope=\"col\">FlightLink</th> </tr> </thead> <tbody> {% for reservation in reservations %} <tr> <td>{{ reservation.seat}}</td> <td>{{ reservation.ticket_number}}</td> <td> <div>Flight number: {{ reservation.flight.flight_number }}</div> <div>Airline: {{ reservation.flight.air_line }}</div> <div>Departure: {{ reservation.flight.departure_city }} {{ reservation.flight.departure }}</div> <div>Arrival: {{ reservation.flight.arrival_city }} {{ reservation.flight.arrival }}</div> <div>Gate: {{ reservation.flight.gate }}</div> </td> <td><a href=\"{% url 'flight_detail' reservation.flight.id %}\" class=\"btn btn-primary\">More</a></td> <td><a href=\"{% url 'reservation_update' reservation.id %}\" class=\"btn btn-primary\">Change</a></td> </tr> {% endfor %} </tbody> </table> {% endblock %}","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0431\u0440\u043e\u043d\u0435\u0439"},{"location":"second/fith/#_8","text":"{% extends 'base.html' %} {% block content %} <a href=\"{% url 'flight_detail' reservation.flight.id %}\" class=\"btn btn-secondary mb-4\">Back to flight</a> <h2>Change seat</h2> <h5 class=\"my-3\">Information about reservation</h5> <div>Old seat: {{ reservation.seat }}</div> <div>Ticket: {{ reservation.ticket_number }}</div> <form method=\"POST\" class=\"mt-3\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\" class=\"btn btn-primary\">Save changes</button> <a href=\"{% url 'reservation_delete' reservation.id %}\" class=\"btn btn-primary\"> or Delete</a> </form> {% endblock %}","title":"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438"},{"location":"second/fith/#_9","text":"{% extends 'base.html' %} {% block content %} <a href=\"{% url 'flight_detail' reservation.flight.id %}\" class=\"btn btn-secondary mb-4\">Back to flight</a> <h2>Delete reservation</h2> <h5 class=\"my-3\">Information about reservation</h5> <div>Seat: {{ reservation.seat }}</div> <div>Ticket: {{ reservation.ticket_number }}</div> <form method=\"POST\" class=\"mt-3\"> {% csrf_token %} <p>Are you sure you want to delete reservation?</p> <button type=\"submit\" class=\"btn btn-danger\">Delete</button> </form> {% endblock %}","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438"},{"location":"second/fourth/","text":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0418\u043c\u043f\u043e\u0440\u0442\u044b from django.http import Http404 from django.contrib.auth import login, authenticate, logout from .forms import ReservationForm, RegistrationForm, LoginForm, CommentForm from .models import Flight, City, Reservation, Seat, Comment, AirLine from django.contrib.auth.decorators import login_required from django.shortcuts import render, redirect, get_object_or_404 from django.utils.crypto import get_random_string from django.db.models import Q \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u044e\u0437\u0435\u0440\u043e\u043c (\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u043b\u043e\u0433\u0438\u043d, \u043b\u043e\u0433\u0430\u0443\u0442) def register(request): if request.method == \"POST\": user_form = RegistrationForm(request.POST) if user_form.is_valid(): user = user_form.save() user.set_password(user.password) user.save() return redirect(\"user_login\") else: user_form = RegistrationForm() return render(request, \"register.html\", {\"user_form\": user_form}) def user_login(request): if request.method == \"POST\": user_form = LoginForm(request.POST) username = user_form.data.get(\"username\") password = user_form.data.get(\"password\") user = authenticate(username=username, password=password) if user is None: return redirect(\"user_login\") login(request, user) return redirect(\"flights_list\") else: user_form = LoginForm() return render(request, \"login.html\", {\"user_form\": user_form}) def user_logout(request): logout(request) return redirect(\"user_login\") \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0435\u0442\u043e\u0432 def flights_list(request): if request.method != \"GET\": return Http404(f\"Method {request.method} not supported\") city = request.GET.get(\"city\", None) available_cities = City.objects.all() airline = request.GET.get(\"airline\", None) available_airlines = AirLine.objects.all() print(city) print(airline) flights = Flight.objects.all() if city is not None: flights = flights.filter(Q(arrival_city__name=city) or Q(departure_city__name=city)) if airline is not None: flights = flights.filter(air_line__name=airline) return render( request, \"flight_list.html\", { \"city\": city, \"available_cities\": available_cities, \"airline\": airline, \"available_airlines\": available_airlines, \"flights\": flights }, ) \u0414\u0435\u0442\u0430\u043b\u0438 \u043f\u043e\u043b\u0435\u0442\u0430 def flight_detail(request, flight_id): flight = get_object_or_404(Flight, pk=flight_id) if request.method == \"POST\": if not request.user.is_authenticated: return redirect(\"user_login\") if 'seat' in request.POST.keys(): seat = Seat.objects.filter(row=request.POST['seat'][0], column=request.POST['seat'][1]).first() form = ReservationForm({\"seat\": seat}) if not form.is_valid(): return redirect(\"flight_detail\", flight_id) ticket = form.save(commit=False) ticket.passenger = request.user ticket.flight = flight ticket.ticken_number = get_random_string(32) ticket.save() elif \"rating\" in request.POST: comment_form = CommentForm(request.POST) if comment_form.is_valid(): comment = comment_form.save(commit=False) comment.flight = flight comment.author = request.user comment.save() return redirect(\"flight_detail\", flight_id) else: seats_set = Seat.objects.filter(plane__plane_flights__id=flight_id).order_by(\"row\", \"column\") seats = [ { \"name\": f\"{seat}\", \"is_taken\": Reservation.objects.filter(seat__id=seat.id, flight__id=flight_id).exists(), } for seat in seats_set ] reseravtion_form = ReservationForm(flight) has_ticket = Reservation.objects.filter( passenger__id=request.user.id, flight__id=flight.id ).exists() comments = Comment.objects.filter(flight=flight) comment_form = CommentForm() return render( request, \"flight_detail.html\", { \"flight\": flight, \"comments\": comments, \"tickets\": Reservation.objects.filter(flight__id=flight_id), \"seats\": seats, \"form\": reseravtion_form, \"has_ticket\": has_ticket, \"user\": request.user, \"comment_form\": comment_form }, ) \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0431\u0440\u043e\u043d\u044c\u044e @login_required(login_url='/login/') def reservations_for_user(request): reservations = Reservation.objects.filter(passenger=request.user) return render(request, \"reservation_for_user.html\", {\"reservations\": reservations}) def reservation_update(request, reservation_id): reservation = get_object_or_404(Reservation, id=reservation_id) #if reservation.flight.departure_time.date() <= datetime.today().date(): # raise Http404(f\"Reservation ended\") if request.method == \"POST\": form = ReservationForm(reservation.flight.id, request.POST, instance=reservation) if not form.is_valid(): return redirect(\"reservation_update\", reservation_id) form.save() return redirect(\"flight_detail\", reservation.flight.id) else: form = ReservationForm(instance=reservation) return render( request, \"reservation_update.html\", {\"form\": form, \"reservation\": reservation}, ) @login_required(login_url='/login/') def reservation_delete(request, reservation_id): reservation = get_object_or_404(Reservation, id=reservation_id, passenger=request.user) #if reservation.flight.departure_time.date() <= datetime.today().date(): # raise Http404(f\"Reservation ended\") if request.method == \"POST\": reservation.delete() return redirect(\"flight_detail\", reservation.flight.id) else: return render( request, \"reservation_delete.html\", {\"reservation\": reservation}, )","title":"Lab2:\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"second/fourth/#_1","text":"","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"second/fourth/#_2","text":"from django.http import Http404 from django.contrib.auth import login, authenticate, logout from .forms import ReservationForm, RegistrationForm, LoginForm, CommentForm from .models import Flight, City, Reservation, Seat, Comment, AirLine from django.contrib.auth.decorators import login_required from django.shortcuts import render, redirect, get_object_or_404 from django.utils.crypto import get_random_string from django.db.models import Q","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b"},{"location":"second/fourth/#_3","text":"def register(request): if request.method == \"POST\": user_form = RegistrationForm(request.POST) if user_form.is_valid(): user = user_form.save() user.set_password(user.password) user.save() return redirect(\"user_login\") else: user_form = RegistrationForm() return render(request, \"register.html\", {\"user_form\": user_form}) def user_login(request): if request.method == \"POST\": user_form = LoginForm(request.POST) username = user_form.data.get(\"username\") password = user_form.data.get(\"password\") user = authenticate(username=username, password=password) if user is None: return redirect(\"user_login\") login(request, user) return redirect(\"flights_list\") else: user_form = LoginForm() return render(request, \"login.html\", {\"user_form\": user_form}) def user_logout(request): logout(request) return redirect(\"user_login\")","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u044e\u0437\u0435\u0440\u043e\u043c (\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u043b\u043e\u0433\u0438\u043d, \u043b\u043e\u0433\u0430\u0443\u0442)"},{"location":"second/fourth/#_4","text":"def flights_list(request): if request.method != \"GET\": return Http404(f\"Method {request.method} not supported\") city = request.GET.get(\"city\", None) available_cities = City.objects.all() airline = request.GET.get(\"airline\", None) available_airlines = AirLine.objects.all() print(city) print(airline) flights = Flight.objects.all() if city is not None: flights = flights.filter(Q(arrival_city__name=city) or Q(departure_city__name=city)) if airline is not None: flights = flights.filter(air_line__name=airline) return render( request, \"flight_list.html\", { \"city\": city, \"available_cities\": available_cities, \"airline\": airline, \"available_airlines\": available_airlines, \"flights\": flights }, )","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0435\u0442\u043e\u0432"},{"location":"second/fourth/#_5","text":"def flight_detail(request, flight_id): flight = get_object_or_404(Flight, pk=flight_id) if request.method == \"POST\": if not request.user.is_authenticated: return redirect(\"user_login\") if 'seat' in request.POST.keys(): seat = Seat.objects.filter(row=request.POST['seat'][0], column=request.POST['seat'][1]).first() form = ReservationForm({\"seat\": seat}) if not form.is_valid(): return redirect(\"flight_detail\", flight_id) ticket = form.save(commit=False) ticket.passenger = request.user ticket.flight = flight ticket.ticken_number = get_random_string(32) ticket.save() elif \"rating\" in request.POST: comment_form = CommentForm(request.POST) if comment_form.is_valid(): comment = comment_form.save(commit=False) comment.flight = flight comment.author = request.user comment.save() return redirect(\"flight_detail\", flight_id) else: seats_set = Seat.objects.filter(plane__plane_flights__id=flight_id).order_by(\"row\", \"column\") seats = [ { \"name\": f\"{seat}\", \"is_taken\": Reservation.objects.filter(seat__id=seat.id, flight__id=flight_id).exists(), } for seat in seats_set ] reseravtion_form = ReservationForm(flight) has_ticket = Reservation.objects.filter( passenger__id=request.user.id, flight__id=flight.id ).exists() comments = Comment.objects.filter(flight=flight) comment_form = CommentForm() return render( request, \"flight_detail.html\", { \"flight\": flight, \"comments\": comments, \"tickets\": Reservation.objects.filter(flight__id=flight_id), \"seats\": seats, \"form\": reseravtion_form, \"has_ticket\": has_ticket, \"user\": request.user, \"comment_form\": comment_form }, )","title":"\u0414\u0435\u0442\u0430\u043b\u0438 \u043f\u043e\u043b\u0435\u0442\u0430"},{"location":"second/fourth/#_6","text":"@login_required(login_url='/login/') def reservations_for_user(request): reservations = Reservation.objects.filter(passenger=request.user) return render(request, \"reservation_for_user.html\", {\"reservations\": reservations}) def reservation_update(request, reservation_id): reservation = get_object_or_404(Reservation, id=reservation_id) #if reservation.flight.departure_time.date() <= datetime.today().date(): # raise Http404(f\"Reservation ended\") if request.method == \"POST\": form = ReservationForm(reservation.flight.id, request.POST, instance=reservation) if not form.is_valid(): return redirect(\"reservation_update\", reservation_id) form.save() return redirect(\"flight_detail\", reservation.flight.id) else: form = ReservationForm(instance=reservation) return render( request, \"reservation_update.html\", {\"form\": form, \"reservation\": reservation}, ) @login_required(login_url='/login/') def reservation_delete(request, reservation_id): reservation = get_object_or_404(Reservation, id=reservation_id, passenger=request.user) #if reservation.flight.departure_time.date() <= datetime.today().date(): # raise Http404(f\"Reservation ended\") if request.method == \"POST\": reservation.delete() return redirect(\"flight_detail\", reservation.flight.id) else: return render( request, \"reservation_delete.html\", {\"reservation\": reservation}, )","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0431\u0440\u043e\u043d\u044c\u044e"},{"location":"second/second/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0418\u043c\u043f\u043e\u0440\u0442\u044b from django.db import models from django.core.validators import MinValueValidator, MaxValueValidator from django.contrib.auth.models import AbstractUser from django.conf import settings \u041f\u0430\u0441\u0441\u0430\u0436\u0438\u0440 class Passenger(AbstractUser): passport = models.CharField(max_length=100) def __str__(self): return f\"{self.first_name} {self.last_name} {self.passport}\" \u0413\u043e\u0440\u043e\u0434 class City(models.Model): name = models.CharField(max_length=50) def __str__(self): return f\"{self.name}\" \u0410\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f class AirLine(models.Model): name = models.CharField(max_length=50) def __str__(self): return f\"{self.name}\" \u041c\u043e\u0434\u0435\u043b\u044c \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430 class PlaneModel(models.Model): name = models.CharField(max_length=50, unique=True) def __str__(self): return f\"{self.name}\" \u041c\u0435\u0441\u0442\u043e class Seat(models.Model): plane = models.ForeignKey('flights.PlaneModel', related_name='plane_seats', on_delete=models.CASCADE) row = models.CharField(max_length=2) column = models.CharField(max_length=2) def __str__(self): return f\"{self.row}{self.column}\" \u041f\u043e\u043b\u0435\u0442 class Flight(models.Model): FLIGHT_TYPES = models.TextChoices('type_of', ['arrive', 'departure']) flight_number = models.CharField(max_length=100) departure_time = models.DateTimeField() arrival_time = models.DateTimeField() plane = models.ForeignKey(\"PlaneModel\", related_name=\"plane_flights\", on_delete=models.CASCADE) departure_city = models.ForeignKey( \"flights.City\", on_delete=models.CASCADE, related_name=\"%(class)s_departure_city\" ) arrival_city = models.ForeignKey( \"flights.City\", on_delete=models.CASCADE, related_name=\"%(class)s_arrival_city\" ) air_line = models.ForeignKey(\"flights.AirLine\", on_delete=models.CASCADE) type = models.CharField(max_length=20, choices=FLIGHT_TYPES.choices) gate = models.CharField(max_length=10) \u0411\u0440\u043e\u043d\u044c \u043c\u0435\u0441\u0442\u0430 class Reservation(models.Model): passenger = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='user_reservations', on_delete=models.CASCADE) flight = models.ForeignKey('flights.Flight', related_name='flight_reservations', on_delete=models.CASCADE) seat = models.OneToOneField('flights.Seat', related_name='reserved_by', on_delete=models.CASCADE) ticket_number = models.CharField(max_length=100) \u041e\u0442\u0437\u044b\u0432 class Comment(models.Model): flight = models.ForeignKey(Flight, on_delete=models.CASCADE) author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE) text = models.TextField() rating = models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)]) #date_time = models.DateTimeField(auto_now_add=True)","title":"Lab2:\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"second/second/#_1","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"second/second/#_2","text":"from django.db import models from django.core.validators import MinValueValidator, MaxValueValidator from django.contrib.auth.models import AbstractUser from django.conf import settings","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b"},{"location":"second/second/#_3","text":"class Passenger(AbstractUser): passport = models.CharField(max_length=100) def __str__(self): return f\"{self.first_name} {self.last_name} {self.passport}\"","title":"\u041f\u0430\u0441\u0441\u0430\u0436\u0438\u0440"},{"location":"second/second/#_4","text":"class City(models.Model): name = models.CharField(max_length=50) def __str__(self): return f\"{self.name}\"","title":"\u0413\u043e\u0440\u043e\u0434"},{"location":"second/second/#_5","text":"class AirLine(models.Model): name = models.CharField(max_length=50) def __str__(self): return f\"{self.name}\"","title":"\u0410\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f"},{"location":"second/second/#_6","text":"class PlaneModel(models.Model): name = models.CharField(max_length=50, unique=True) def __str__(self): return f\"{self.name}\"","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430"},{"location":"second/second/#_7","text":"class Seat(models.Model): plane = models.ForeignKey('flights.PlaneModel', related_name='plane_seats', on_delete=models.CASCADE) row = models.CharField(max_length=2) column = models.CharField(max_length=2) def __str__(self): return f\"{self.row}{self.column}\"","title":"\u041c\u0435\u0441\u0442\u043e"},{"location":"second/second/#_8","text":"class Flight(models.Model): FLIGHT_TYPES = models.TextChoices('type_of', ['arrive', 'departure']) flight_number = models.CharField(max_length=100) departure_time = models.DateTimeField() arrival_time = models.DateTimeField() plane = models.ForeignKey(\"PlaneModel\", related_name=\"plane_flights\", on_delete=models.CASCADE) departure_city = models.ForeignKey( \"flights.City\", on_delete=models.CASCADE, related_name=\"%(class)s_departure_city\" ) arrival_city = models.ForeignKey( \"flights.City\", on_delete=models.CASCADE, related_name=\"%(class)s_arrival_city\" ) air_line = models.ForeignKey(\"flights.AirLine\", on_delete=models.CASCADE) type = models.CharField(max_length=20, choices=FLIGHT_TYPES.choices) gate = models.CharField(max_length=10)","title":"\u041f\u043e\u043b\u0435\u0442"},{"location":"second/second/#_9","text":"class Reservation(models.Model): passenger = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='user_reservations', on_delete=models.CASCADE) flight = models.ForeignKey('flights.Flight', related_name='flight_reservations', on_delete=models.CASCADE) seat = models.OneToOneField('flights.Seat', related_name='reserved_by', on_delete=models.CASCADE) ticket_number = models.CharField(max_length=100)","title":"\u0411\u0440\u043e\u043d\u044c \u043c\u0435\u0441\u0442\u0430"},{"location":"second/second/#_10","text":"class Comment(models.Model): flight = models.ForeignKey(Flight, on_delete=models.CASCADE) author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE) text = models.TextField() rating = models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(10)]) #date_time = models.DateTimeField(auto_now_add=True)","title":"\u041e\u0442\u0437\u044b\u0432"},{"location":"second/seventh/","text":"\u0414\u0436\u0430\u043d\u0433\u043e-\u0430\u0434\u043c\u0438\u043d \u0418\u043c\u043f\u043e\u0440\u0442\u044b from django.contrib import admin from django.contrib.auth.admin import UserAdmin from . import models \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 admin.site.register(models.Passenger, UserAdmin) admin.site.register(models.AirLine) admin.site.register(models.City) admin.site.register(models.PlaneModel) admin.site.register(models.Flight) admin.site.register(models.Seat) admin.site.register(models.Reservation)","title":"Lab2:\u0414\u0436\u0430\u043d\u0433\u043e-\u0410\u0434\u043c\u0438\u043d"},{"location":"second/seventh/#-","text":"","title":"\u0414\u0436\u0430\u043d\u0433\u043e-\u0430\u0434\u043c\u0438\u043d"},{"location":"second/seventh/#_1","text":"from django.contrib import admin from django.contrib.auth.admin import UserAdmin from . import models","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b"},{"location":"second/seventh/#_2","text":"admin.site.register(models.Passenger, UserAdmin) admin.site.register(models.AirLine) admin.site.register(models.City) admin.site.register(models.PlaneModel) admin.site.register(models.Flight) admin.site.register(models.Seat) admin.site.register(models.Reservation)","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439"},{"location":"second/sixth/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u0418\u043c\u043f\u043e\u0440\u0442\u044b from django.urls import path from . import views from django.contrib.auth import views as auth_views \u0421\u0441\u044b\u043b\u043a\u0438 urlpatterns = [ path(\"register/\", views.register, name=\"register\"), path(\"login/\", views.user_login, name=\"user_login\"), path(\"logout/\", views.user_logout, name=\"logout\"), path(\"flights\", views.flights_list, name=\"flights_list\"), path(\"flights/<int:flight_id>\", views.flight_detail, name=\"flight_detail\"), path(\"reservations/\", views.reservations_for_user, name=\"reservations_for_user\"), path(\"reservations/<int:reservation_id>/\", views.reservation_update, name=\"reservation_update\"), path(\"reservations/<int:reservation_id>/delete\", views.reservation_delete, name=\"reservation_delete\"), ]","title":"Lab2:\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"second/sixth/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"second/sixth/#_2","text":"from django.urls import path from . import views from django.contrib.auth import views as auth_views","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b"},{"location":"second/sixth/#_3","text":"urlpatterns = [ path(\"register/\", views.register, name=\"register\"), path(\"login/\", views.user_login, name=\"user_login\"), path(\"logout/\", views.user_logout, name=\"logout\"), path(\"flights\", views.flights_list, name=\"flights_list\"), path(\"flights/<int:flight_id>\", views.flight_detail, name=\"flight_detail\"), path(\"reservations/\", views.reservations_for_user, name=\"reservations_for_user\"), path(\"reservations/<int:reservation_id>/\", views.reservation_update, name=\"reservation_update\"), path(\"reservations/<int:reservation_id>/delete\", views.reservation_delete, name=\"reservation_delete\"), ]","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"second/third/","text":"\u0424\u043e\u0440\u043c\u044b \u0418\u043c\u043f\u043e\u0440\u0442\u044b from django import forms from .models import Passenger, Reservation, Comment, Seat \u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 class RegistrationForm(forms.ModelForm): class Meta: model = Passenger fields = [\"username\", \"password\", \"first_name\", \"last_name\", \"email\", \"passport\"] \u0424\u043e\u0440\u043c\u0430 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 class LoginForm(forms.ModelForm): class Meta: model = Passenger fields = [\"username\", \"password\"] \u0424\u043e\u0440\u043c\u0430 \u0431\u0440\u043e\u043d\u0438 class ReservationForm(forms.ModelForm): class Meta: model = Reservation fields = [\"seat\"] \u0424\u043e\u0440\u043c\u0430 \u043e\u0442\u0437\u044b\u0432\u0430 class CommentForm(forms.ModelForm): class Meta: model = Comment fields = [\"rating\", \"text\"]","title":"Lab2:\u0424\u043e\u0440\u043c\u044b"},{"location":"second/third/#_1","text":"","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"second/third/#_2","text":"from django import forms from .models import Passenger, Reservation, Comment, Seat","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b"},{"location":"second/third/#_3","text":"class RegistrationForm(forms.ModelForm): class Meta: model = Passenger fields = [\"username\", \"password\", \"first_name\", \"last_name\", \"email\", \"passport\"]","title":"\u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438"},{"location":"second/third/#_4","text":"class LoginForm(forms.ModelForm): class Meta: model = Passenger fields = [\"username\", \"password\"]","title":"\u0424\u043e\u0440\u043c\u0430 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430"},{"location":"second/third/#_5","text":"class ReservationForm(forms.ModelForm): class Meta: model = Reservation fields = [\"seat\"]","title":"\u0424\u043e\u0440\u043c\u0430 \u0431\u0440\u043e\u043d\u0438"},{"location":"second/third/#_6","text":"class CommentForm(forms.ModelForm): class Meta: model = Comment fields = [\"rating\", \"text\"]","title":"\u0424\u043e\u0440\u043c\u0430 \u043e\u0442\u0437\u044b\u0432\u0430"},{"location":"third/first/","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f/\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0412 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c\u044b\u0435 \u0432 settings.py, \u0432\u043d\u0435\u0441\u0435\u043d\u044b \u0434\u0432\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f: INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # 'rest_framework', 'rest_framework.authtoken', 'drf_spectacular', 'rest_framework_simplejwt', \"corsheaders\", # 'system.apps.SystemConfig' ] \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0431\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u0418: AUTH_PROFILE_MODULE = 'system.CustomUser' AUTH_USER_MODEL = 'system.CustomUser' \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043c\u043e\u0434\u0435\u043b\u0438 \u044e\u0437\u0435\u0440\u0430. \u0422\u0430\u043a \u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u0439\u043e\u043a\u0438 jwt-\u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': [ 'rest_framework.authentication.SessionAuthentication', 'rest_framework_simplejwt.authentication.JWTAuthentication', ], 'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema', } SIMPLE_JWT = { 'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=1), 'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=1), } \u0422\u0430\u043a \u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u0440\u0435\u043d\u044c \u0434\u043b\u044f \u044e\u0440\u043b-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0441\u0432\u0430\u0433\u0433\u0435\u0440\u0430 urlpatterns = [ path('admin/', admin.site.urls), path('system/', include('system.urls')), path('api/schema/', SpectacularAPIView.as_view(), name='schema'), path('api/swagger/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'), ] urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)","title":"Lab3:\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438"},{"location":"third/first/#_1","text":"\u0412 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c\u044b\u0435 \u0432 settings.py, \u0432\u043d\u0435\u0441\u0435\u043d\u044b \u0434\u0432\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f: INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # 'rest_framework', 'rest_framework.authtoken', 'drf_spectacular', 'rest_framework_simplejwt', \"corsheaders\", # 'system.apps.SystemConfig' ] \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0431\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u0418: AUTH_PROFILE_MODULE = 'system.CustomUser' AUTH_USER_MODEL = 'system.CustomUser' \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043c\u043e\u0434\u0435\u043b\u0438 \u044e\u0437\u0435\u0440\u0430. \u0422\u0430\u043a \u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u0439\u043e\u043a\u0438 jwt-\u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': [ 'rest_framework.authentication.SessionAuthentication', 'rest_framework_simplejwt.authentication.JWTAuthentication', ], 'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema', } SIMPLE_JWT = { 'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=1), 'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=1), } \u0422\u0430\u043a \u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u0440\u0435\u043d\u044c \u0434\u043b\u044f \u044e\u0440\u043b-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0441\u0432\u0430\u0433\u0433\u0435\u0440\u0430 urlpatterns = [ path('admin/', admin.site.urls), path('system/', include('system.urls')), path('api/schema/', SpectacularAPIView.as_view(), name='schema'), path('api/swagger/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'), ] urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f/\u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"third/fith/","text":"\u0421\u0441\u044b\u043b\u043a\u0438 \u0418\u043c\u043f\u043e\u0440\u0442\u044b from rest_framework.routers import SimpleRouter from . import views from django.urls import path, include \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0430\u0434\u0440\u0435\u0441\u043e\u0432 router = SimpleRouter() router.register('newspaper', views.NewspaperViewSet) router.register('printer', views.PrinterViewSet) router.register('post-office', views.PostOfficeViewSet) router.register('printing-newspapers', views.PrintingNewspaperViewSet) router.register('ordering-newspapers', views.PostOfficeOrderViewSet) router.register('transporting', views.TransportationViewSet) router.register('do', views.ActionViewSet, basename='action') urlpatterns = [ path('register/', views.RegistrationView.as_view(), name='register'), path('login/', views.LoginView.as_view(), name='login'), path('logout/', views.LogoutView.as_view(), name='logout'), path('change-password/<int:pk>/', views.ChangePasswordView.as_view(), name='change-password'), path('', include(router.urls)), ]","title":"Lab3:\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"third/fith/#_1","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"third/fith/#_2","text":"from rest_framework.routers import SimpleRouter from . import views from django.urls import path, include","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b"},{"location":"third/fith/#_3","text":"router = SimpleRouter() router.register('newspaper', views.NewspaperViewSet) router.register('printer', views.PrinterViewSet) router.register('post-office', views.PostOfficeViewSet) router.register('printing-newspapers', views.PrintingNewspaperViewSet) router.register('ordering-newspapers', views.PostOfficeOrderViewSet) router.register('transporting', views.TransportationViewSet) router.register('do', views.ActionViewSet, basename='action') urlpatterns = [ path('register/', views.RegistrationView.as_view(), name='register'), path('login/', views.LoginView.as_view(), name='login'), path('logout/', views.LogoutView.as_view(), name='logout'), path('change-password/<int:pk>/', views.ChangePasswordView.as_view(), name='change-password'), path('', include(router.urls)), ]","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0430\u0434\u0440\u0435\u0441\u043e\u0432"},{"location":"third/forth/","text":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0418\u043c\u043f\u043e\u0440\u0442\u044b from rest_framework.viewsets import ModelViewSet, ViewSet from rest_framework.decorators import action from drf_spectacular.utils import extend_schema, OpenApiTypes from rest_framework.permissions import SAFE_METHODS from . import serializers from .utils import get_tokens_for_user from django.contrib.auth import authenticate, login, logout from rest_framework import status from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView from rest_framework import generics from django.db.models import Sum from .models import (CustomUser, Newspaper, Printer, PrintingNewspaper, PostOffice, PostOfficeOrder, Transportation) \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u043b\u043e\u0433\u0438\u043d, \u043b\u043e\u0433\u0430\u0443\u0442, \u0441\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f class RegistrationView(generics.CreateAPIView): serializer_class = serializers.RegistrationSerializer queryset = CustomUser.objects.all() class LoginView(generics.GenericAPIView): serializer_class = serializers.LoginSerializer queryset = CustomUser.objects.all() def post(self, request): if 'username' not in request.data or 'password' not in request.data: return Response({'msg': 'Credentials missing'}, status=status.HTTP_400_BAD_REQUEST) username = request.data.get(\"username\", None) password = request.data.get(\"password\", None) print(username, password) if username is not None and password is not None: user = authenticate(request, username=username, password=password) if user is not None: login(request, user) auth_data = get_tokens_for_user(request.user) return Response({'msg': 'Login Success', **auth_data}, status=status.HTTP_200_OK) return Response({'msg': 'Invalid Credentials'}, status=status.HTTP_401_UNAUTHORIZED) class LogoutView(APIView): serializer_class = serializers.LogoutSerializer queryset = CustomUser.objects.all() def post(self, request): logout(request) return Response({'msg': 'Successfully Logged out'}, status=status.HTTP_200_OK) class ChangePasswordView(generics.GenericAPIView): serializer_class = serializers.PasswordChangeSerializer queryset = CustomUser.objects.all() permission_classes = (IsAuthenticated,) def post(self, request): serializer = self.get_serializer(data=request.data) serializer.is_valid(raise_exception=True) request.user.set_password(serializer.validated_data['new_password']) request.user.save() return Response(status=status.HTTP_204_NO_CONTENT) \u0413\u0430\u0437\u0435\u0442\u0430 class NewspaperViewSet(ModelViewSet): queryset = Newspaper.objects.all() serializer_class = serializers.NewspaperSerializer \u041f\u043e\u0447\u0442\u0430 class PostOfficeViewSet(ModelViewSet): queryset = PostOffice.objects.all() serializer_class = serializers.PostOfficeSerializer \u0422\u0438\u043f\u043e\u0433\u0440\u0430\u0444\u0438\u044f class PrinterViewSet(ModelViewSet): queryset = Printer.objects.all() serializer_class = serializers.PrinterSerializer \u041f\u0435\u0447\u0430\u0442\u044c \u0433\u0430\u0437\u0435\u0442\u044b class PrintingNewspaperViewSet(ModelViewSet): queryset = PrintingNewspaper.objects.all() def get_serializer_class(self): if self.action in SAFE_METHODS: return serializers.ShowPrintingNewspaperSerializer return serializers.PrintingNewspaperSerializer \u0417\u0430\u043a\u0430\u0437 \u043f\u043e\u0447\u0442\u044b class PostOfficeOrderViewSet(ModelViewSet): queryset = PostOfficeOrder.objects.all() def get_serializer_class(self): if self.action in SAFE_METHODS: return serializers.ShowPostOfficeOrderSerializer return serializers.PostOfficeOrderSerializer \u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430 class TransportationViewSet(ModelViewSet): queryset = Transportation.objects.all() def get_serializer_class(self): if self.action in SAFE_METHODS: return serializers.ShowTransportationSerializer return serializers.TransportationSerializer \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f class ActionViewSet(ViewSet): @extend_schema(request=OpenApiTypes.STR, responses=serializers.ShowLossSerializer) @action(detail=False, methods=['POST'], url_path='more-expensive-newspapers') def by_cost(self, request): cost = float(list(request.data.keys())[0]) gazettes = Newspaper.objects.filter(cost__gt=cost) qs = PostOfficeOrder.objects.filter(newspaper__in=gazettes) ser = serializers.ShowPostOfficeOrderSerializer(qs, many=True) return Response(ser.data, status=status.HTTP_200_OK) @extend_schema(responses=serializers.ShowLossSerializer) @action(detail=False, methods=['GET'], url_path='lost-delivers') def errors(self, request, pk=None): qs = Transportation.objects.none() context = {} for obj in PostOffice.objects.all(): for journal in PostOfficeOrder.objects.filter(post_office=obj.id): sum = Transportation.objects.filter(post_office_order__post=obj.id, post_office_order_newspaper=journal.id).aggregate(Sum('amount')) if sum['amount__sum'] < journal.amount: qs |= PostOfficeOrder.objects.filter(id=journal.id) context[journal.id] = sum ser = serializers.ShowLossSerializer(qs, many=True, context=context) return Response(ser.data, status=status.HTTP_200_OK) @extend_schema(request=OpenApiTypes.STR, responses=serializers.ShowLossSerializer) @action(detail=False, methods=['POST'], url_path='find-addresses') def find_by_name(self, request): name = list(request.data.keys())[0] qs = PrintingNewspaper.objects.filter(newspaper__name=name) ser = serializers.ShowPrintingAddreses(qs, many=True) return Response(data=ser.data, status=status.HTTP_200_OK) @extend_schema(request=serializers.FindTransportationsSerializers, responses=serializers.ShowTransportEndSerializer) @action(detail=False, methods=['POST'], url_path='where-to-sell') def where_to_sell(self, request): name = request.data['name'] address = request.data['where_printed'] gip = PrintingNewspaper.objects.filter(newspaper__name=name, printer__address=address).first() obj = Transportation.objects.filter(printing_newspaper=gip.id).first() ser = serializers.ShowTransportEndSerializer(obj) return Response(ser.data, status=status.HTTP_200_OK) @extend_schema(responses={ 'most-sold-redactor': serializers.ShowRedactor, 'printed_here': OpenApiTypes.INT, 'show_printed': serializers.ShowPrintingNewspaperSerializer(many=True), 'where-to-sell': serializers.ShowTransportEndSerializer(many=True) }) @action(detail=True, methods=['GET'], url_path='report') def redactor(self, request, pk=None): data = {} obj = PrintingNewspaper.objects.filter(printer=pk).order_by('-how_many_to_print').first() if obj: ser = serializers.ShowRedactor(obj.newspaper) data['most-sold-redactor'] = ser.data else: data['most-sold-redactor'] = {} qs = PrintingNewspaper.objects.filter(printer=pk) data['printed_here'] = qs.count() ser = serializers.ShowPrintingNewspaperSerializer(qs, many=True) data['show_printed'] = ser.data ts = Transportation.objects.filter(printing_newspaper__in=qs) ser = serializers.ShowTransportEndSerializer(ts, many=True) data['where-to-sell'] = ser.data return Response(data, status=status.HTTP_200_OK)","title":"Lab3:\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"third/forth/#_1","text":"","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"third/forth/#_2","text":"from rest_framework.viewsets import ModelViewSet, ViewSet from rest_framework.decorators import action from drf_spectacular.utils import extend_schema, OpenApiTypes from rest_framework.permissions import SAFE_METHODS from . import serializers from .utils import get_tokens_for_user from django.contrib.auth import authenticate, login, logout from rest_framework import status from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView from rest_framework import generics from django.db.models import Sum from .models import (CustomUser, Newspaper, Printer, PrintingNewspaper, PostOffice, PostOfficeOrder, Transportation)","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b"},{"location":"third/forth/#_3","text":"class RegistrationView(generics.CreateAPIView): serializer_class = serializers.RegistrationSerializer queryset = CustomUser.objects.all() class LoginView(generics.GenericAPIView): serializer_class = serializers.LoginSerializer queryset = CustomUser.objects.all() def post(self, request): if 'username' not in request.data or 'password' not in request.data: return Response({'msg': 'Credentials missing'}, status=status.HTTP_400_BAD_REQUEST) username = request.data.get(\"username\", None) password = request.data.get(\"password\", None) print(username, password) if username is not None and password is not None: user = authenticate(request, username=username, password=password) if user is not None: login(request, user) auth_data = get_tokens_for_user(request.user) return Response({'msg': 'Login Success', **auth_data}, status=status.HTTP_200_OK) return Response({'msg': 'Invalid Credentials'}, status=status.HTTP_401_UNAUTHORIZED) class LogoutView(APIView): serializer_class = serializers.LogoutSerializer queryset = CustomUser.objects.all() def post(self, request): logout(request) return Response({'msg': 'Successfully Logged out'}, status=status.HTTP_200_OK) class ChangePasswordView(generics.GenericAPIView): serializer_class = serializers.PasswordChangeSerializer queryset = CustomUser.objects.all() permission_classes = (IsAuthenticated,) def post(self, request): serializer = self.get_serializer(data=request.data) serializer.is_valid(raise_exception=True) request.user.set_password(serializer.validated_data['new_password']) request.user.save() return Response(status=status.HTTP_204_NO_CONTENT)","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u043b\u043e\u0433\u0438\u043d, \u043b\u043e\u0433\u0430\u0443\u0442, \u0441\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f"},{"location":"third/forth/#_4","text":"class NewspaperViewSet(ModelViewSet): queryset = Newspaper.objects.all() serializer_class = serializers.NewspaperSerializer","title":"\u0413\u0430\u0437\u0435\u0442\u0430"},{"location":"third/forth/#_5","text":"class PostOfficeViewSet(ModelViewSet): queryset = PostOffice.objects.all() serializer_class = serializers.PostOfficeSerializer","title":"\u041f\u043e\u0447\u0442\u0430"},{"location":"third/forth/#_6","text":"class PrinterViewSet(ModelViewSet): queryset = Printer.objects.all() serializer_class = serializers.PrinterSerializer","title":"\u0422\u0438\u043f\u043e\u0433\u0440\u0430\u0444\u0438\u044f"},{"location":"third/forth/#_7","text":"class PrintingNewspaperViewSet(ModelViewSet): queryset = PrintingNewspaper.objects.all() def get_serializer_class(self): if self.action in SAFE_METHODS: return serializers.ShowPrintingNewspaperSerializer return serializers.PrintingNewspaperSerializer","title":"\u041f\u0435\u0447\u0430\u0442\u044c \u0433\u0430\u0437\u0435\u0442\u044b"},{"location":"third/forth/#_8","text":"class PostOfficeOrderViewSet(ModelViewSet): queryset = PostOfficeOrder.objects.all() def get_serializer_class(self): if self.action in SAFE_METHODS: return serializers.ShowPostOfficeOrderSerializer return serializers.PostOfficeOrderSerializer","title":"\u0417\u0430\u043a\u0430\u0437 \u043f\u043e\u0447\u0442\u044b"},{"location":"third/forth/#_9","text":"class TransportationViewSet(ModelViewSet): queryset = Transportation.objects.all() def get_serializer_class(self): if self.action in SAFE_METHODS: return serializers.ShowTransportationSerializer return serializers.TransportationSerializer","title":"\u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430"},{"location":"third/forth/#_10","text":"class ActionViewSet(ViewSet): @extend_schema(request=OpenApiTypes.STR, responses=serializers.ShowLossSerializer) @action(detail=False, methods=['POST'], url_path='more-expensive-newspapers') def by_cost(self, request): cost = float(list(request.data.keys())[0]) gazettes = Newspaper.objects.filter(cost__gt=cost) qs = PostOfficeOrder.objects.filter(newspaper__in=gazettes) ser = serializers.ShowPostOfficeOrderSerializer(qs, many=True) return Response(ser.data, status=status.HTTP_200_OK) @extend_schema(responses=serializers.ShowLossSerializer) @action(detail=False, methods=['GET'], url_path='lost-delivers') def errors(self, request, pk=None): qs = Transportation.objects.none() context = {} for obj in PostOffice.objects.all(): for journal in PostOfficeOrder.objects.filter(post_office=obj.id): sum = Transportation.objects.filter(post_office_order__post=obj.id, post_office_order_newspaper=journal.id).aggregate(Sum('amount')) if sum['amount__sum'] < journal.amount: qs |= PostOfficeOrder.objects.filter(id=journal.id) context[journal.id] = sum ser = serializers.ShowLossSerializer(qs, many=True, context=context) return Response(ser.data, status=status.HTTP_200_OK) @extend_schema(request=OpenApiTypes.STR, responses=serializers.ShowLossSerializer) @action(detail=False, methods=['POST'], url_path='find-addresses') def find_by_name(self, request): name = list(request.data.keys())[0] qs = PrintingNewspaper.objects.filter(newspaper__name=name) ser = serializers.ShowPrintingAddreses(qs, many=True) return Response(data=ser.data, status=status.HTTP_200_OK) @extend_schema(request=serializers.FindTransportationsSerializers, responses=serializers.ShowTransportEndSerializer) @action(detail=False, methods=['POST'], url_path='where-to-sell') def where_to_sell(self, request): name = request.data['name'] address = request.data['where_printed'] gip = PrintingNewspaper.objects.filter(newspaper__name=name, printer__address=address).first() obj = Transportation.objects.filter(printing_newspaper=gip.id).first() ser = serializers.ShowTransportEndSerializer(obj) return Response(ser.data, status=status.HTTP_200_OK) @extend_schema(responses={ 'most-sold-redactor': serializers.ShowRedactor, 'printed_here': OpenApiTypes.INT, 'show_printed': serializers.ShowPrintingNewspaperSerializer(many=True), 'where-to-sell': serializers.ShowTransportEndSerializer(many=True) }) @action(detail=True, methods=['GET'], url_path='report') def redactor(self, request, pk=None): data = {} obj = PrintingNewspaper.objects.filter(printer=pk).order_by('-how_many_to_print').first() if obj: ser = serializers.ShowRedactor(obj.newspaper) data['most-sold-redactor'] = ser.data else: data['most-sold-redactor'] = {} qs = PrintingNewspaper.objects.filter(printer=pk) data['printed_here'] = qs.count() ser = serializers.ShowPrintingNewspaperSerializer(qs, many=True) data['show_printed'] = ser.data ts = Transportation.objects.filter(printing_newspaper__in=qs) ser = serializers.ShowTransportEndSerializer(ts, many=True) data['where-to-sell'] = ser.data return Response(data, status=status.HTTP_200_OK)","title":"\u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"third/practice/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.1 \u041c\u043e\u0434\u0435\u043b\u0438 \u0418\u043c\u043f\u043e\u0440\u0442\u044b >>> from practice.models import * >>> import datetime >>> from django.db.models import Min, Max, Count \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 >>> car1 = Car.objects.create(num='num1', mark='mark1', model='model1', color='black') >>> car2 = Car.objects.create(num='num2', mark='mark1', model='model2', color='black') >>> car3 = Car.objects.create(num='num3', mark='mark1', model='model3', color='black') >>> car4 = Car.objects.create(num='num4', mark='mark2', model='model1', color='black') >>> car5 = Car.objects.create(num='num5', mark='mark2', model='model2', color='black') >>> car6 = Car.objects.create(num='num6', mark='mark2', model='model3', color='black') >>> owner1 = Owner.objects.create(name='name1', surname='surname1', birthday=datetime.date.today()) >>> owner2 = Owner.objects.create(name='name2', surname='surname2', birthday=datetime.date.today()) >>> owner3 = Owner.objects.create(name='name3', surname='surname3', birthday=datetime.date.today()) >>> owner4 = Owner.objects.create(name='name4', surname='surname4', birthday=datetime.date.today()) >>> owner5 = Owner.objects.create(name='name5', surname='surname5', birthday=datetime.date.today()) >>> owner6 = Owner.objects.create(name='name6', surname='surname6', birthday=datetime.date.today()) >>>license1 = License.objects.create(name='licence1', owner=owner1, license_type='type1', date_given=datetime.date.today()) >>>license2 = License.objects.create(name='licence2', owner=owner2, license_type='type1', date_given=datetime.date.today()) >>>license3 = License.objects.create(name='licence3', owner=owner3, license_type='type1', date_given=datetime.date.today()) >>>license4 = License.objects.create(name='licence4', owner=owner4, license_type='type2', date_given=datetime.date.today()) >>>license5 = License.objects.create(name='licence5', owner=owner5, license_type='type2', date_given=datetime.date.today()) >>>car_owing1 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car1, owner=owner1) >>>car_owing2 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car2, owner=owner2) >>>car_owing3 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car3, owner=owner3) >>>car_owing4 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car4, owner=owner4) >>>car_owing5 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car5, owner=owner5) >>>car_owing6 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car6, owner=owner6) \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) >>> Car.objects.filter(mark='mark1') <QuerySet [<Car: Car object (1)>, <Car: Car object (2)>, <Car: Car object (3)>, <Car: Car object (7)>, <Car: Car object (8)>, <Car: Car object (9)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) >>> Owner.objects.filter(name='name1') <QuerySet [<Owner: Owner object (1)>, <Owner: Owner object (7)>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) >>> License.objects.filter(owner_id=7) <QuerySet [<License: License object (1)>]> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) >>> Car.objects.filter(color='black') <QuerySet [<Car: Car object (1)>, <Car: Car object (2)>, <Car: Car object (3)>, <Car: Car object (4)>, <Car: Car object (5)>, <Car: Car object (6)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) >>> Owner.objects.filter(cars__start__gt=datetime.date(year=2010, month=1, day=1), ... cars__start__lt=datetime.date(year=2011, month=1, day=1)) <QuerySet []> >>> Owner.objects.filter(cars__start__gt=datetime.date(year=2024, month=1, day=1), cars__start__lt=datetime.date(year=2025, month=1, day=1)) <QuerySet [<Owner: Owner object (7)>, <Owner: Owner object (8)>, <Owner: Owner object (9)>, <Owner: Owner object (10)>, <Owner: Owner object (11)>, <Owner: Owner object (12)>]> \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> License.objects.aggregate(date_given=Min('date_given')) {'date_given': datetime.date(2024, 1, 10)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 >>> CarOwning.objects.aggregate(date_given=Max('finish')) {'date_given': datetime.date(2024, 1, 10)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f >>> counts = Owner.objects.annotate(Count(\"cars\")) >>> for count in counts: ... print(count.name, count.cars__count) ... name1 1 name2 1 name3 1 name4 1 name5 1 name6 1 \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 >>> Car.objects.values(\"mark\").annotate(Count(\"id\")) <QuerySet [{'mark': 'mark1', 'id__count': 6}, {'mark': 'mark2', 'id__count': 6}]> \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> CarOwning.objects.order_by(\"owner__licences__date_given\") <QuerySet [<CarOwning: CarOwning object (1)>, <CarOwning: CarOwning object (2)>, <CarOwning: CarOwning object (3)>, <CarOwning: CarOwning object (4)>, <CarOwning: CarOwning object (5)>, <CarOwning: CarOwning object (6)>, <CarOwning: CarOwning object (12)>, <CarOwning: CarOwning object (7)>, <CarOwning: CarOwning object (8)>, <CarOwning: CarOwning object (9)>, <CarOwning: CarOwning object (10)>, <CarOwning: CarOwning object (11)>]>","title":"Lab3:\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.1"},{"location":"third/practice/#31","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0418\u043c\u043f\u043e\u0440\u0442\u044b >>> from practice.models import * >>> import datetime >>> from django.db.models import Min, Max, Count \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 >>> car1 = Car.objects.create(num='num1', mark='mark1', model='model1', color='black') >>> car2 = Car.objects.create(num='num2', mark='mark1', model='model2', color='black') >>> car3 = Car.objects.create(num='num3', mark='mark1', model='model3', color='black') >>> car4 = Car.objects.create(num='num4', mark='mark2', model='model1', color='black') >>> car5 = Car.objects.create(num='num5', mark='mark2', model='model2', color='black') >>> car6 = Car.objects.create(num='num6', mark='mark2', model='model3', color='black') >>> owner1 = Owner.objects.create(name='name1', surname='surname1', birthday=datetime.date.today()) >>> owner2 = Owner.objects.create(name='name2', surname='surname2', birthday=datetime.date.today()) >>> owner3 = Owner.objects.create(name='name3', surname='surname3', birthday=datetime.date.today()) >>> owner4 = Owner.objects.create(name='name4', surname='surname4', birthday=datetime.date.today()) >>> owner5 = Owner.objects.create(name='name5', surname='surname5', birthday=datetime.date.today()) >>> owner6 = Owner.objects.create(name='name6', surname='surname6', birthday=datetime.date.today()) >>>license1 = License.objects.create(name='licence1', owner=owner1, license_type='type1', date_given=datetime.date.today()) >>>license2 = License.objects.create(name='licence2', owner=owner2, license_type='type1', date_given=datetime.date.today()) >>>license3 = License.objects.create(name='licence3', owner=owner3, license_type='type1', date_given=datetime.date.today()) >>>license4 = License.objects.create(name='licence4', owner=owner4, license_type='type2', date_given=datetime.date.today()) >>>license5 = License.objects.create(name='licence5', owner=owner5, license_type='type2', date_given=datetime.date.today()) >>>car_owing1 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car1, owner=owner1) >>>car_owing2 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car2, owner=owner2) >>>car_owing3 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car3, owner=owner3) >>>car_owing4 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car4, owner=owner4) >>>car_owing5 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car5, owner=owner5) >>>car_owing6 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car6, owner=owner6) \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) >>> Car.objects.filter(mark='mark1') <QuerySet [<Car: Car object (1)>, <Car: Car object (2)>, <Car: Car object (3)>, <Car: Car object (7)>, <Car: Car object (8)>, <Car: Car object (9)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) >>> Owner.objects.filter(name='name1') <QuerySet [<Owner: Owner object (1)>, <Owner: Owner object (7)>]>","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.1"},{"location":"third/practice/#id-id-2","text":">>> License.objects.filter(owner_id=7) <QuerySet [<License: License object (1)>]>","title":"\u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430)"},{"location":"third/practice/#_1","text":">>> Car.objects.filter(color='black') <QuerySet [<Car: Car object (1)>, <Car: Car object (2)>, <Car: Car object (3)>, <Car: Car object (4)>, <Car: Car object (5)>, <Car: Car object (6)>]>","title":"\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442)"},{"location":"third/practice/#2010","text":">>> Owner.objects.filter(cars__start__gt=datetime.date(year=2010, month=1, day=1), ... cars__start__lt=datetime.date(year=2011, month=1, day=1)) <QuerySet []> >>> Owner.objects.filter(cars__start__gt=datetime.date(year=2024, month=1, day=1), cars__start__lt=datetime.date(year=2025, month=1, day=1)) <QuerySet [<Owner: Owner object (7)>, <Owner: Owner object (8)>, <Owner: Owner object (9)>, <Owner: Owner object (10)>, <Owner: Owner object (11)>, <Owner: Owner object (12)>]>","title":"\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435)"},{"location":"third/practice/#_2","text":">>> License.objects.aggregate(date_given=Min('date_given')) {'date_given': datetime.date(2024, 1, 10)}","title":"\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f"},{"location":"third/practice/#-","text":">>> CarOwning.objects.aggregate(date_given=Max('finish')) {'date_given': datetime.date(2024, 1, 10)}","title":"\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435"},{"location":"third/practice/#_3","text":">>> counts = Owner.objects.annotate(Count(\"cars\")) >>> for count in counts: ... print(count.name, count.cars__count) ... name1 1 name2 1 name3 1 name4 1 name5 1 name6 1","title":"\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f"},{"location":"third/practice/#_4","text":">>> Car.objects.values(\"mark\").annotate(Count(\"id\")) <QuerySet [{'mark': 'mark1', 'id__count': 6}, {'mark': 'mark2', 'id__count': 6}]>","title":"\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438"},{"location":"third/practice/#_5","text":">>> CarOwning.objects.order_by(\"owner__licences__date_given\") <QuerySet [<CarOwning: CarOwning object (1)>, <CarOwning: CarOwning object (2)>, <CarOwning: CarOwning object (3)>, <CarOwning: CarOwning object (4)>, <CarOwning: CarOwning object (5)>, <CarOwning: CarOwning object (6)>, <CarOwning: CarOwning object (12)>, <CarOwning: CarOwning object (7)>, <CarOwning: CarOwning object (8)>, <CarOwning: CarOwning object (9)>, <CarOwning: CarOwning object (10)>, <CarOwning: CarOwning object (11)>]>","title":"\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f"},{"location":"third/second/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0418\u043c\u043f\u043e\u0440\u0442\u044b from django.db import models from django.contrib.auth.models import AbstractUser, BaseUserManager \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u044e\u0437\u0435\u0440\u043e\u043c class CustomUserManager(BaseUserManager): def create_user(self, username, type, password): user = self.model( username=username, type=type, ) user.set_password(password) user.save(using=self._db) return user def create_superuser(self, username, type, password): user = self.model( username=username, type='A', password=password ) user.is_admin = True user.save(using=self._db) return user class CustomUser(AbstractUser): id = models.BigAutoField(primary_key=True) type = models.TextField(choices=(('A', 'A'), ('P', 'P'), ('PO', 'PO'), ('N', 'N'))) is_active = models.BooleanField(default=True) is_admin = models.BooleanField(default=False) linkedin_token = models.TextField(blank=True, default='') USERNAME_FIELD = 'username' objects = CustomUserManager() REQUIRED_FIELDS = ['type'] def __str__(self): return self.username def has_perm(self, perm, obj=None): return True def has_module_perms(self, app_label): return True @property def is_staff(self): \"Is the user a member of staff?\" return self.is_admin \u0413\u0430\u0437\u0435\u0442\u0430 class Newspaper(models.Model): name = models.CharField(max_length=500) index = models.CharField(max_length=100) redactor_last_name = models.CharField(max_length=100) redactor_first_name = models.CharField(max_length=100) redactor_patronic = models.CharField(max_length=100) cost = models.FloatField() \u041f\u043e\u0447\u0442\u0430 class PostOffice(models.Model): num = models.CharField(max_length=100) address = models.CharField(max_length=500) \u0422\u0438\u043f\u043e\u0433\u0440\u0430\u0444\u0438\u044f class Printer(models.Model): name = models.CharField(max_length=100) address = models.CharField(max_length=500) max_capacity = models.IntegerField() \u041f\u0435\u0447\u0430\u0442\u044c \u0433\u0430\u0437\u0435\u0442\u044b class PrintingNewspaper(models.Model): newspaper = models.ForeignKey('system.Newspaper', related_name='where_to_print', on_delete=models.CASCADE) printer = models.ForeignKey('system.Printer', related_name='what_is_printed', on_delete=models.CASCADE) how_many_to_print = models.IntegerField() \u0417\u0430\u043a\u0430\u0437 \u043f\u043e\u0447\u0442\u044b class PostOfficeOrder(models.Model): newspaper = models.ForeignKey('system.Newspaper', related_name='needed_in', on_delete=models.CASCADE) post_office = models.ForeignKey('system.PostOffice', related_name='what_is_needed', on_delete=models.CASCADE) how_many_needed = models.IntegerField() \u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430 class Transportation(models.Model): printing_newspaper = models.ForeignKey('system.PrintingNewspaper', related_name='printed_for', on_delete=models.CASCADE) post_office_order = models.ForeignKey('system.PostOfficeOrder', related_name='printed_by', on_delete=models.CASCADE) amount = models.IntegerField()","title":"Lab3:\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"third/second/#_1","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"third/second/#_2","text":"from django.db import models from django.contrib.auth.models import AbstractUser, BaseUserManager","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b"},{"location":"third/second/#_3","text":"class CustomUserManager(BaseUserManager): def create_user(self, username, type, password): user = self.model( username=username, type=type, ) user.set_password(password) user.save(using=self._db) return user def create_superuser(self, username, type, password): user = self.model( username=username, type='A', password=password ) user.is_admin = True user.save(using=self._db) return user class CustomUser(AbstractUser): id = models.BigAutoField(primary_key=True) type = models.TextField(choices=(('A', 'A'), ('P', 'P'), ('PO', 'PO'), ('N', 'N'))) is_active = models.BooleanField(default=True) is_admin = models.BooleanField(default=False) linkedin_token = models.TextField(blank=True, default='') USERNAME_FIELD = 'username' objects = CustomUserManager() REQUIRED_FIELDS = ['type'] def __str__(self): return self.username def has_perm(self, perm, obj=None): return True def has_module_perms(self, app_label): return True @property def is_staff(self): \"Is the user a member of staff?\" return self.is_admin","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u044e\u0437\u0435\u0440\u043e\u043c"},{"location":"third/second/#_4","text":"class Newspaper(models.Model): name = models.CharField(max_length=500) index = models.CharField(max_length=100) redactor_last_name = models.CharField(max_length=100) redactor_first_name = models.CharField(max_length=100) redactor_patronic = models.CharField(max_length=100) cost = models.FloatField()","title":"\u0413\u0430\u0437\u0435\u0442\u0430"},{"location":"third/second/#_5","text":"class PostOffice(models.Model): num = models.CharField(max_length=100) address = models.CharField(max_length=500)","title":"\u041f\u043e\u0447\u0442\u0430"},{"location":"third/second/#_6","text":"class Printer(models.Model): name = models.CharField(max_length=100) address = models.CharField(max_length=500) max_capacity = models.IntegerField()","title":"\u0422\u0438\u043f\u043e\u0433\u0440\u0430\u0444\u0438\u044f"},{"location":"third/second/#_7","text":"class PrintingNewspaper(models.Model): newspaper = models.ForeignKey('system.Newspaper', related_name='where_to_print', on_delete=models.CASCADE) printer = models.ForeignKey('system.Printer', related_name='what_is_printed', on_delete=models.CASCADE) how_many_to_print = models.IntegerField()","title":"\u041f\u0435\u0447\u0430\u0442\u044c \u0433\u0430\u0437\u0435\u0442\u044b"},{"location":"third/second/#_8","text":"class PostOfficeOrder(models.Model): newspaper = models.ForeignKey('system.Newspaper', related_name='needed_in', on_delete=models.CASCADE) post_office = models.ForeignKey('system.PostOffice', related_name='what_is_needed', on_delete=models.CASCADE) how_many_needed = models.IntegerField()","title":"\u0417\u0430\u043a\u0430\u0437 \u043f\u043e\u0447\u0442\u044b"},{"location":"third/second/#_9","text":"class Transportation(models.Model): printing_newspaper = models.ForeignKey('system.PrintingNewspaper', related_name='printed_for', on_delete=models.CASCADE) post_office_order = models.ForeignKey('system.PostOfficeOrder', related_name='printed_by', on_delete=models.CASCADE) amount = models.IntegerField()","title":"\u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430"},{"location":"third/third/","text":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b \u0418\u043f\u043c\u043f\u043e\u0440\u0442\u044b from rest_framework import serializers from drf_spectacular.utils import extend_schema_field, OpenApiTypes from .models import (CustomUser, Newspaper, Printer, PrintingNewspaper, PostOffice, PostOfficeOrder, Transportation) \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u043b\u043e\u0433\u0438\u043d, \u043b\u043e\u0433\u0430\u0443\u0442, \u0441\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f class RegistrationSerializer(serializers.ModelSerializer): password2 = serializers.CharField(style={\"input_type\": \"password\"}, write_only=True) class Meta: model = CustomUser fields = ['username', 'type', 'password', 'password2'] extra_kwargs = { 'password': {'write_only': True} } def validate(self, attrs): password = attrs.get('password') password2 = attrs.pop('password2') if password != password2: raise serializers.ValidationError(\"Password and Confirm Password Does not match\") return attrs def create(self, validate_data): return CustomUser.objects.create_user(**validate_data) class LoginSerializer(serializers.ModelSerializer): class Meta: model = CustomUser fields = ['username', 'password',] class LogoutSerializer(serializers.ModelSerializer): class Meta: model = CustomUser fields = [] class PasswordChangeSerializer(serializers.ModelSerializer): current_password = serializers.CharField(style={\"input_type\": \"password\"}, required=True) new_password = serializers.CharField(style={\"input_type\": \"password\"}, required=True) class Meta: model = CustomUser fields = ['current_password', 'new_password'] def validate_current_password(self, value): if not self.context['request'].user.check_password(value): raise serializers.ValidationError({'current_password': 'Does not match'}) return value \u0413\u0430\u0437\u0435\u0442\u0430 class NewspaperSerializer(serializers.ModelSerializer): class Meta: model = Newspaper fields = '__all__' \u041f\u043e\u0447\u0442\u0430 class PostOfficeSerializer(serializers.ModelSerializer): class Meta: model = PostOffice fields = '__all__' \u0422\u0438\u043f\u043e\u0433\u0440\u0430\u0444\u0438\u044f class PrinterSerializer(serializers.ModelSerializer): class Meta: model = Printer fields = '__all__' \u041f\u0435\u0447\u0430\u0442\u044c \u0433\u0430\u0437\u0435\u0442\u044b class PrintingNewspaperSerializer(serializers.ModelSerializer): class Meta: model = PrintingNewspaper fields = '__all__' class ShowPrintingNewspaperSerializer(serializers.ModelSerializer): newspaper = NewspaperSerializer(read_only=True) printer = PrinterSerializer(read_only=True) class Meta: model = PrintingNewspaper fields = ['id', 'newspaper', 'printer', 'how_many_to_print'] \u0417\u0430\u043a\u0430\u0437 \u043f\u043e\u0447\u0442\u044b class PostOfficeOrderSerializer(serializers.ModelSerializer): class Meta: model = PostOfficeOrder fields = '__all__' class ShowPostOfficeOrderSerializer(serializers.ModelSerializer): newspaper = NewspaperSerializer(read_only=True) post_office = PostOfficeSerializer(read_only=True) class Meta: model = PostOfficeOrder fields = ['id', 'newspaper', 'post_office', 'how_many_needed'] \u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430 class TransportationSerializer(serializers.ModelSerializer): class Meta: model = Transportation fields = '__all__' class ShowTransportationSerializer(serializers.ModelSerializer): printing_newspaper = ShowPrintingNewspaperSerializer(read_only=True) post_office_order = ShowPostOfficeOrderSerializer(read_only=True) class Meta: model = Transportation fields = ['id', 'printing_newspaper', 'post_office_order', 'amount'] \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 class ShowLossSerializer(serializers.ModelSerializer): have = serializers.SerializerMethodField() newspaper = NewspaperSerializer(read_only=True) post_office = PostOfficeSerializer(read_only=True) class Meta: model = PostOfficeOrder fields = ['id', 'newspaper', 'post_office', 'how_many_needed', 'have'] @extend_schema_field(OpenApiTypes.INT) def get_have(self, obj): return self.context[obj.id]['amount__sum'] class ShowRedactor(serializers.ModelSerializer): class Meta: model = Newspaper fields = ['redactor_last_name', 'redactor_first_name', 'redactor_patronic'] class ShowPrintingAddreses(serializers.ModelSerializer): address = serializers.CharField(source='printer.address') class Meta: model = PrintingNewspaper fields = ['address'] class FindTransportationsSerializers(serializers.Serializer): name = serializers.CharField() where_printed = serializers.CharField() class Meta: fields = ['name', 'where_printed'] class ShowTransportEndSerializer(serializers.ModelSerializer): post_needed = ShowPostOfficeOrderSerializer(read_only=True) class Meta: model = Transportation fields = ['post_needed']","title":"Lab3:\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b"},{"location":"third/third/#_1","text":"","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0430\u0439\u0437\u0435\u0440\u044b"},{"location":"third/third/#_2","text":"from rest_framework import serializers from drf_spectacular.utils import extend_schema_field, OpenApiTypes from .models import (CustomUser, Newspaper, Printer, PrintingNewspaper, PostOffice, PostOfficeOrder, Transportation)","title":"\u0418\u043f\u043c\u043f\u043e\u0440\u0442\u044b"},{"location":"third/third/#_3","text":"class RegistrationSerializer(serializers.ModelSerializer): password2 = serializers.CharField(style={\"input_type\": \"password\"}, write_only=True) class Meta: model = CustomUser fields = ['username', 'type', 'password', 'password2'] extra_kwargs = { 'password': {'write_only': True} } def validate(self, attrs): password = attrs.get('password') password2 = attrs.pop('password2') if password != password2: raise serializers.ValidationError(\"Password and Confirm Password Does not match\") return attrs def create(self, validate_data): return CustomUser.objects.create_user(**validate_data) class LoginSerializer(serializers.ModelSerializer): class Meta: model = CustomUser fields = ['username', 'password',] class LogoutSerializer(serializers.ModelSerializer): class Meta: model = CustomUser fields = [] class PasswordChangeSerializer(serializers.ModelSerializer): current_password = serializers.CharField(style={\"input_type\": \"password\"}, required=True) new_password = serializers.CharField(style={\"input_type\": \"password\"}, required=True) class Meta: model = CustomUser fields = ['current_password', 'new_password'] def validate_current_password(self, value): if not self.context['request'].user.check_password(value): raise serializers.ValidationError({'current_password': 'Does not match'}) return value","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u043b\u043e\u0433\u0438\u043d, \u043b\u043e\u0433\u0430\u0443\u0442, \u0441\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f"},{"location":"third/third/#_4","text":"class NewspaperSerializer(serializers.ModelSerializer): class Meta: model = Newspaper fields = '__all__'","title":"\u0413\u0430\u0437\u0435\u0442\u0430"},{"location":"third/third/#_5","text":"class PostOfficeSerializer(serializers.ModelSerializer): class Meta: model = PostOffice fields = '__all__'","title":"\u041f\u043e\u0447\u0442\u0430"},{"location":"third/third/#_6","text":"class PrinterSerializer(serializers.ModelSerializer): class Meta: model = Printer fields = '__all__'","title":"\u0422\u0438\u043f\u043e\u0433\u0440\u0430\u0444\u0438\u044f"},{"location":"third/third/#_7","text":"class PrintingNewspaperSerializer(serializers.ModelSerializer): class Meta: model = PrintingNewspaper fields = '__all__' class ShowPrintingNewspaperSerializer(serializers.ModelSerializer): newspaper = NewspaperSerializer(read_only=True) printer = PrinterSerializer(read_only=True) class Meta: model = PrintingNewspaper fields = ['id', 'newspaper', 'printer', 'how_many_to_print']","title":"\u041f\u0435\u0447\u0430\u0442\u044c \u0433\u0430\u0437\u0435\u0442\u044b"},{"location":"third/third/#_8","text":"class PostOfficeOrderSerializer(serializers.ModelSerializer): class Meta: model = PostOfficeOrder fields = '__all__' class ShowPostOfficeOrderSerializer(serializers.ModelSerializer): newspaper = NewspaperSerializer(read_only=True) post_office = PostOfficeSerializer(read_only=True) class Meta: model = PostOfficeOrder fields = ['id', 'newspaper', 'post_office', 'how_many_needed']","title":"\u0417\u0430\u043a\u0430\u0437 \u043f\u043e\u0447\u0442\u044b"},{"location":"third/third/#_9","text":"class TransportationSerializer(serializers.ModelSerializer): class Meta: model = Transportation fields = '__all__' class ShowTransportationSerializer(serializers.ModelSerializer): printing_newspaper = ShowPrintingNewspaperSerializer(read_only=True) post_office_order = ShowPostOfficeOrderSerializer(read_only=True) class Meta: model = Transportation fields = ['id', 'printing_newspaper', 'post_office_order', 'amount']","title":"\u0414\u043e\u0441\u0442\u0430\u0432\u043a\u0430"},{"location":"third/third/#_10","text":"class ShowLossSerializer(serializers.ModelSerializer): have = serializers.SerializerMethodField() newspaper = NewspaperSerializer(read_only=True) post_office = PostOfficeSerializer(read_only=True) class Meta: model = PostOfficeOrder fields = ['id', 'newspaper', 'post_office', 'how_many_needed', 'have'] @extend_schema_field(OpenApiTypes.INT) def get_have(self, obj): return self.context[obj.id]['amount__sum'] class ShowRedactor(serializers.ModelSerializer): class Meta: model = Newspaper fields = ['redactor_last_name', 'redactor_first_name', 'redactor_patronic'] class ShowPrintingAddreses(serializers.ModelSerializer): address = serializers.CharField(source='printer.address') class Meta: model = PrintingNewspaper fields = ['address'] class FindTransportationsSerializers(serializers.Serializer): name = serializers.CharField() where_printed = serializers.CharField() class Meta: fields = ['name', 'where_printed'] class ShowTransportEndSerializer(serializers.ModelSerializer): post_needed = ShowPostOfficeOrderSerializer(read_only=True) class Meta: model = Transportation fields = ['post_needed']","title":"\u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435"}]}